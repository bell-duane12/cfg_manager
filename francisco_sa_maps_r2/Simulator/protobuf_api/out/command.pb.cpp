// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggerCommand_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_objects_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectValues_objects_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTCCommands_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadCommandClass_command_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_command_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadCommand_command_2eproto;
class LoggerCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggerCommand> _instance;
} _LoggerCommand_default_instance_;
class ThreadCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThreadCommand> _instance;
} _ThreadCommand_default_instance_;
class DigitalCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalCommand> _instance;
} _DigitalCommand_default_instance_;
class AnalogCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogCommand> _instance;
} _AnalogCommand_default_instance_;
class FileCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileCommand> _instance;
} _FileCommand_default_instance_;
class ReadCommandClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadCommandClass> _instance;
} _ReadCommandClass_default_instance_;
class RTCCommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RTCCommands> _instance;
} _RTCCommands_default_instance_;
class CommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Commands> _instance;
} _Commands_default_instance_;
static void InitDefaultsscc_info_AnalogCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnalogCommand_default_instance_;
    new (ptr) ::AnalogCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnalogCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnalogCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_Commands_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Commands_default_instance_;
    new (ptr) ::Commands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Commands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Commands_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Commands_command_2eproto}, {
      &scc_info_DigitalCommand_command_2eproto.base,
      &scc_info_ReadCommandClass_command_2eproto.base,
      &scc_info_RTCCommands_command_2eproto.base,
      &scc_info_AnalogCommand_command_2eproto.base,
      &scc_info_LoggerCommand_command_2eproto.base,
      &scc_info_ThreadCommand_command_2eproto.base,}};

static void InitDefaultsscc_info_DigitalCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DigitalCommand_default_instance_;
    new (ptr) ::DigitalCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DigitalCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_FileCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FileCommand_default_instance_;
    new (ptr) ::FileCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FileCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_LoggerCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoggerCommand_default_instance_;
    new (ptr) ::LoggerCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoggerCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggerCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoggerCommand_command_2eproto}, {}};

static void InitDefaultsscc_info_RTCCommands_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTCCommands_default_instance_;
    new (ptr) ::RTCCommands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTCCommands::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RTCCommands_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RTCCommands_command_2eproto}, {}};

static void InitDefaultsscc_info_ReadCommandClass_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReadCommandClass_default_instance_;
    new (ptr) ::ReadCommandClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReadCommandClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadCommandClass_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadCommandClass_command_2eproto}, {
      &scc_info_ObjectValues_objects_2eproto.base,}};

static void InitDefaultsscc_info_ThreadCommand_command_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ThreadCommand_default_instance_;
    new (ptr) ::ThreadCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ThreadCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadCommand_command_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThreadCommand_command_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_command_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_command_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_command_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::LoggerCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LoggerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoggerCommand, log_state_),
  PROTOBUF_FIELD_OFFSET(::LoggerCommand, success_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ThreadCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ThreadCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ThreadCommand, operation_),
  PROTOBUF_FIELD_OFFSET(::ThreadCommand, success_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, point_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, operation_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, time_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, success_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, errcode_),
  PROTOBUF_FIELD_OFFSET(::DigitalCommand, errmsg_),
  1,
  5,
  3,
  2,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, point_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, operation_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, time_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, success_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, errcode_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, errmsg_),
  PROTOBUF_FIELD_OFFSET(::AnalogCommand, acdata_),
  1,
  6,
  3,
  2,
  5,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::FileCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FileCommand, name_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, startregister_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, endregister_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, operation_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, registers_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, success_),
  PROTOBUF_FIELD_OFFSET(::FileCommand, content_),
  0,
  2,
  3,
  5,
  ~0u,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, integrity_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, class1_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, class2_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, class3_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, classvalues_),
  PROTOBUF_FIELD_OFFSET(::ReadCommandClass, integrityvalues_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::RTCCommands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RTCCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RTCCommands, write_),
  PROTOBUF_FIELD_OFFSET(::RTCCommands, rtcdata_),
  PROTOBUF_FIELD_OFFSET(::RTCCommands, read_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::Commands, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Commands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Commands, digcmd_),
  PROTOBUF_FIELD_OFFSET(::Commands, readclass_),
  PROTOBUF_FIELD_OFFSET(::Commands, rtccmd_),
  PROTOBUF_FIELD_OFFSET(::Commands, enablepoll_),
  PROTOBUF_FIELD_OFFSET(::Commands, attempts_),
  PROTOBUF_FIELD_OFFSET(::Commands, analogcmd_),
  PROTOBUF_FIELD_OFFSET(::Commands, logcmd_),
  PROTOBUF_FIELD_OFFSET(::Commands, threadcmd_),
  0,
  1,
  2,
  6,
  7,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::LoggerCommand)},
  { 9, 16, sizeof(::ThreadCommand)},
  { 18, 29, sizeof(::DigitalCommand)},
  { 35, 47, sizeof(::AnalogCommand)},
  { 54, 66, sizeof(::FileCommand)},
  { 73, 84, sizeof(::ReadCommandClass)},
  { 90, 98, sizeof(::RTCCommands)},
  { 101, 114, sizeof(::Commands)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoggerCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ThreadCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DigitalCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnalogCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FileCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReadCommandClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RTCCommands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Commands_default_instance_),
};

const char descriptor_table_protodef_command_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcommand.proto\032\robjects.proto\"3\n\rLogger"
  "Command\022\021\n\tlog_state\030\001 \002(\010\022\017\n\007success\030\002 "
  "\001(\010\"@\n\rThreadCommand\022\036\n\toperation\030\001 \002(\0162"
  "\013.ThrCmdType\022\017\n\007success\030\002 \001(\010\"{\n\016Digital"
  "Command\022\r\n\005point\030\001 \001(\r\022\032\n\toperation\030\002 \001("
  "\0162\007.DOType\022\014\n\004time\030\003 \001(\003\022\017\n\007success\030\004 \001("
  "\010\022\017\n\007errCode\030\005 \001(\r\022\016\n\006errMsg\030\006 \001(\t\"\212\001\n\rA"
  "nalogCommand\022\r\n\005point\030\001 \001(\r\022\032\n\toperation"
  "\030\002 \001(\0162\007.AOType\022\014\n\004time\030\003 \001(\003\022\017\n\007success"
  "\030\004 \001(\010\022\017\n\007errCode\030\005 \001(\r\022\016\n\006errMsg\030\006 \001(\t\022"
  "\016\n\006acdata\030\007 \001(\001\"\227\001\n\013FileCommand\022\014\n\004name\030"
  "\001 \001(\t\022\025\n\rstartRegister\030\002 \001(\r\022\023\n\013endRegis"
  "ter\030\003 \001(\r\022\031\n\toperation\030\004 \001(\0162\006.FType\022\021\n\t"
  "registers\030\005 \003(\t\022\017\n\007success\030\006 \001(\010\022\017\n\007cont"
  "ent\030\007 \001(\t\"\241\001\n\020ReadCommandClass\022\021\n\tintegr"
  "ity\030\001 \001(\010\022\016\n\006class1\030\002 \001(\010\022\016\n\006class2\030\003 \001("
  "\010\022\016\n\006class3\030\004 \001(\010\022\"\n\013classValues\030\005 \003(\0132\r"
  ".ObjectValues\022&\n\017integrityValues\030\006 \003(\0132\r"
  ".ObjectValues\";\n\013RTCCommands\022\r\n\005write\030\001 "
  "\001(\010\022\017\n\007rtcdata\030\002 \001(\003\022\014\n\004read\030\003 \001(\010\"\373\001\n\010C"
  "ommands\022\037\n\006digCmd\030\001 \001(\0132\017.DigitalCommand"
  "\022$\n\treadClass\030\002 \001(\0132\021.ReadCommandClass\022\034"
  "\n\006rtcCmd\030\003 \001(\0132\014.RTCCommands\022\022\n\nenablePo"
  "ll\030\004 \001(\010\022\020\n\010attempts\030\006 \001(\r\022!\n\tanalogCmd\030"
  "\007 \001(\0132\016.AnalogCommand\022\036\n\006logCmd\030\010 \001(\0132\016."
  "LoggerCommand\022!\n\tthreadCmd\030\t \001(\0132\016.Threa"
  "dCommand*o\n\006DOType\022\r\n\tDOT_CLOSE\020\001\022\014\n\010DOT"
  "_TRIP\020\002\022\020\n\014DOT_LATCH_ON\020\003\022\021\n\rDOT_LATCH_O"
  "FF\020\004\022\020\n\014DOT_PULSE_ON\020\005\022\021\n\rDOT_PULSE_OFF\020"
  "\006*%\n\006AOType\022\014\n\010AOT_READ\020\001\022\r\n\tAOT_WRITE\020\002"
  "*-\n\nThrCmdType\022\t\n\005START\020\001\022\010\n\004STOP\020\002\022\n\n\006R"
  "ELOAD\020\003*\"\n\005FType\022\013\n\007FT_READ\020\001\022\014\n\010FT_WRIT"
  "E\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_command_2eproto_deps[1] = {
  &::descriptor_table_objects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_command_2eproto_sccs[8] = {
  &scc_info_AnalogCommand_command_2eproto.base,
  &scc_info_Commands_command_2eproto.base,
  &scc_info_DigitalCommand_command_2eproto.base,
  &scc_info_FileCommand_command_2eproto.base,
  &scc_info_LoggerCommand_command_2eproto.base,
  &scc_info_RTCCommands_command_2eproto.base,
  &scc_info_ReadCommandClass_command_2eproto.base,
  &scc_info_ThreadCommand_command_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_command_2eproto_once;
static bool descriptor_table_command_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto = {
  &descriptor_table_command_2eproto_initialized, descriptor_table_protodef_command_2eproto, "command.proto", 1283,
  &descriptor_table_command_2eproto_once, descriptor_table_command_2eproto_sccs, descriptor_table_command_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_command_2eproto::offsets,
  file_level_metadata_command_2eproto, 8, file_level_enum_descriptors_command_2eproto, file_level_service_descriptors_command_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_command_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_command_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[0];
}
bool DOType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AOType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[1];
}
bool AOType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThrCmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[2];
}
bool ThrCmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[3];
}
bool FType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoggerCommand::InitAsDefaultInstance() {
}
class LoggerCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<LoggerCommand>()._has_bits_);
  static void set_has_log_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoggerCommand::LoggerCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoggerCommand)
}
LoggerCommand::LoggerCommand(const LoggerCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&log_state_, &from.log_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&log_state_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:LoggerCommand)
}

void LoggerCommand::SharedCtor() {
  ::memset(&log_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&log_state_)) + sizeof(success_));
}

LoggerCommand::~LoggerCommand() {
  // @@protoc_insertion_point(destructor:LoggerCommand)
  SharedDtor();
}

void LoggerCommand::SharedDtor() {
}

void LoggerCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggerCommand& LoggerCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggerCommand_command_2eproto.base);
  return *internal_default_instance();
}


void LoggerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:LoggerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&log_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&log_state_)) + sizeof(success_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoggerCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool log_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_log_state(&has_bits);
          log_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggerCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoggerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool log_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_log_state(), target);
  }

  // optional bool success = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoggerCommand)
  return target;
}

size_t LoggerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoggerCommand)
  size_t total_size = 0;

  // required bool log_state = 1;
  if (_internal_has_log_state()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggerCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoggerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggerCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggerCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoggerCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoggerCommand)
    MergeFrom(*source);
  }
}

void LoggerCommand::MergeFrom(const LoggerCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoggerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      log_state_ = from.log_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoggerCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoggerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggerCommand::CopyFrom(const LoggerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoggerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggerCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LoggerCommand::InternalSwap(LoggerCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(log_state_, other->log_state_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggerCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThreadCommand::InitAsDefaultInstance() {
}
class ThreadCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadCommand>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThreadCommand::ThreadCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ThreadCommand)
}
ThreadCommand::ThreadCommand(const ThreadCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&success_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:ThreadCommand)
}

void ThreadCommand::SharedCtor() {
  success_ = false;
  operation_ = 1;
}

ThreadCommand::~ThreadCommand() {
  // @@protoc_insertion_point(destructor:ThreadCommand)
  SharedDtor();
}

void ThreadCommand::SharedDtor() {
}

void ThreadCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThreadCommand& ThreadCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThreadCommand_command_2eproto.base);
  return *internal_default_instance();
}


void ThreadCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ThreadCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    success_ = false;
    operation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ThreadCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ThrCmdType operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ThrCmdType_IsValid(val))) {
            _internal_set_operation(static_cast<::ThrCmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThreadCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ThreadCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ThrCmdType operation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional bool success = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ThreadCommand)
  return target;
}

size_t ThreadCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ThreadCommand)
  size_t total_size = 0;

  // required .ThrCmdType operation = 1;
  if (_internal_has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ThreadCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThreadCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ThreadCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ThreadCommand)
    MergeFrom(*source);
  }
}

void ThreadCommand::MergeFrom(const ThreadCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ThreadCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ThreadCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ThreadCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadCommand::CopyFrom(const ThreadCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ThreadCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ThreadCommand::InternalSwap(ThreadCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalCommand::InitAsDefaultInstance() {
}
class DigitalCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<DigitalCommand>()._has_bits_);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DigitalCommand::DigitalCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DigitalCommand)
}
DigitalCommand::DigitalCommand(const DigitalCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errmsg()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&point_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:DigitalCommand)
}

void DigitalCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalCommand_command_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&point_)) + sizeof(errcode_));
  operation_ = 1;
}

DigitalCommand::~DigitalCommand() {
  // @@protoc_insertion_point(destructor:DigitalCommand)
  SharedDtor();
}

void DigitalCommand::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalCommand& DigitalCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalCommand_command_2eproto.base);
  return *internal_default_instance();
}


void DigitalCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errcode_) -
        reinterpret_cast<char*>(&point_)) + sizeof(errcode_));
    operation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DigitalCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOType operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOType_IsValid(val))) {
            _internal_set_operation(static_cast<::DOType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 errCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errMsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DigitalCommand.errMsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_point(), target);
  }

  // optional .DOType operation = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // optional int64 time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // optional uint32 errCode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_errcode(), target);
  }

  // optional string errMsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DigitalCommand.errMsg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalCommand)
  return target;
}

size_t DigitalCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string errMsg = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errmsg());
    }

    // optional uint32 point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int64 time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

    // optional uint32 errCode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional .DOType operation = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalCommand)
    MergeFrom(*source);
  }
}

void DigitalCommand::MergeFrom(const DigitalCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DigitalCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalCommand::CopyFrom(const DigitalCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalCommand::IsInitialized() const {
  return true;
}

void DigitalCommand::InternalSwap(DigitalCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
  swap(success_, other->success_);
  swap(time_, other->time_);
  swap(errcode_, other->errcode_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogCommand::InitAsDefaultInstance() {
}
class AnalogCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalogCommand>()._has_bits_);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

AnalogCommand::AnalogCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnalogCommand)
}
AnalogCommand::AnalogCommand(const AnalogCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errmsg()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&point_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:AnalogCommand)
}

void AnalogCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogCommand_command_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&point_)) + sizeof(errcode_));
  operation_ = 1;
}

AnalogCommand::~AnalogCommand() {
  // @@protoc_insertion_point(destructor:AnalogCommand)
  SharedDtor();
}

void AnalogCommand::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AnalogCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogCommand& AnalogCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogCommand_command_2eproto.base);
  return *internal_default_instance();
}


void AnalogCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:AnalogCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errcode_) -
        reinterpret_cast<char*>(&point_)) + sizeof(errcode_));
    operation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnalogCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AOType operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::AOType_IsValid(val))) {
            _internal_set_operation(static_cast<::AOType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 errCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errMsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AnalogCommand.errMsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double acdata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_acdata(&has_bits);
          acdata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnalogCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_point(), target);
  }

  // optional .AOType operation = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // optional int64 time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  // optional uint32 errCode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_errcode(), target);
  }

  // optional string errMsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "AnalogCommand.errMsg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errmsg(), target);
  }

  // optional double acdata = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnalogCommand)
  return target;
}

size_t AnalogCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnalogCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string errMsg = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errmsg());
    }

    // optional uint32 point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int64 time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time());
    }

    // optional double acdata = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 errCode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional .AOType operation = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnalogCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnalogCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnalogCommand)
    MergeFrom(*source);
  }
}

void AnalogCommand::MergeFrom(const AnalogCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnalogCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      acdata_ = from.acdata_;
    }
    if (cached_has_bits & 0x00000020u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnalogCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnalogCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogCommand::CopyFrom(const AnalogCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnalogCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogCommand::IsInitialized() const {
  return true;
}

void AnalogCommand::InternalSwap(AnalogCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
  swap(success_, other->success_);
  swap(time_, other->time_);
  swap(acdata_, other->acdata_);
  swap(errcode_, other->errcode_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileCommand::InitAsDefaultInstance() {
}
class FileCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<FileCommand>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startregister(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endregister(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FileCommand::FileCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileCommand)
}
FileCommand::FileCommand(const FileCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      registers_(from.registers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&startregister_, &from.startregister_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&startregister_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:FileCommand)
}

void FileCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileCommand_command_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startregister_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&startregister_)) + sizeof(success_));
  operation_ = 1;
}

FileCommand::~FileCommand() {
  // @@protoc_insertion_point(destructor:FileCommand)
  SharedDtor();
}

void FileCommand::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileCommand& FileCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileCommand_command_2eproto.base);
  return *internal_default_instance();
}


void FileCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:FileCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&startregister_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&startregister_)) + sizeof(success_));
    operation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FileCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FileCommand.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 startRegister = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_startregister(&has_bits);
          startregister_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 endRegister = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_endregister(&has_bits);
          endregister_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .FType operation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::FType_IsValid(val))) {
            _internal_set_operation(static_cast<::FType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string registers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_registers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FileCommand.registers");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool success = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FileCommand.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FileCommand.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 startRegister = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_startregister(), target);
  }

  // optional uint32 endRegister = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_endregister(), target);
  }

  // optional .FType operation = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_operation(), target);
  }

  // repeated string registers = 5;
  for (int i = 0, n = this->_internal_registers_size(); i < n; i++) {
    const auto& s = this->_internal_registers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FileCommand.registers");
    target = stream->WriteString(5, s, target);
  }

  // optional bool success = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_success(), target);
  }

  // optional string content = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "FileCommand.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FileCommand)
  return target;
}

size_t FileCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string registers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(registers_.size());
  for (int i = 0, n = registers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      registers_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string content = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional uint32 startRegister = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_startregister());
    }

    // optional uint32 endRegister = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_endregister());
    }

    // optional bool success = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .FType operation = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const FileCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileCommand)
    MergeFrom(*source);
  }
}

void FileCommand::MergeFrom(const FileCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  registers_.MergeFrom(from.registers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      startregister_ = from.startregister_;
    }
    if (cached_has_bits & 0x00000008u) {
      endregister_ = from.endregister_;
    }
    if (cached_has_bits & 0x00000010u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000020u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FileCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileCommand::CopyFrom(const FileCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCommand::IsInitialized() const {
  return true;
}

void FileCommand::InternalSwap(FileCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  registers_.InternalSwap(&other->registers_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startregister_, other->startregister_);
  swap(endregister_, other->endregister_);
  swap(success_, other->success_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadCommandClass::InitAsDefaultInstance() {
}
class ReadCommandClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadCommandClass>()._has_bits_);
  static void set_has_integrity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

void ReadCommandClass::clear_classvalues() {
  classvalues_.Clear();
}
void ReadCommandClass::clear_integrityvalues() {
  integrityvalues_.Clear();
}
ReadCommandClass::ReadCommandClass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadCommandClass)
}
ReadCommandClass::ReadCommandClass(const ReadCommandClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      classvalues_(from.classvalues_),
      integrityvalues_(from.integrityvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&integrity_, &from.integrity_,
    static_cast<size_t>(reinterpret_cast<char*>(&class3_) -
    reinterpret_cast<char*>(&integrity_)) + sizeof(class3_));
  // @@protoc_insertion_point(copy_constructor:ReadCommandClass)
}

void ReadCommandClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadCommandClass_command_2eproto.base);
  ::memset(&integrity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class3_) -
      reinterpret_cast<char*>(&integrity_)) + sizeof(class3_));
}

ReadCommandClass::~ReadCommandClass() {
  // @@protoc_insertion_point(destructor:ReadCommandClass)
  SharedDtor();
}

void ReadCommandClass::SharedDtor() {
}

void ReadCommandClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadCommandClass& ReadCommandClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadCommandClass_command_2eproto.base);
  return *internal_default_instance();
}


void ReadCommandClass::Clear() {
// @@protoc_insertion_point(message_clear_start:ReadCommandClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classvalues_.Clear();
  integrityvalues_.Clear();
  ::memset(&integrity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class3_) -
      reinterpret_cast<char*>(&integrity_)) + sizeof(class3_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadCommandClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool integrity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_integrity(&has_bits);
          integrity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool class1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_class1(&has_bits);
          class1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool class2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_class2(&has_bits);
          class2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool class3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_class3(&has_bits);
          class3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ObjectValues classValues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ObjectValues integrityValues = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_integrityvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadCommandClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadCommandClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool integrity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_integrity(), target);
  }

  // optional bool class1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_class1(), target);
  }

  // optional bool class2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_class2(), target);
  }

  // optional bool class3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_class3(), target);
  }

  // repeated .ObjectValues classValues = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_classvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_classvalues(i), target, stream);
  }

  // repeated .ObjectValues integrityValues = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_integrityvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_integrityvalues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadCommandClass)
  return target;
}

size_t ReadCommandClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReadCommandClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ObjectValues classValues = 5;
  total_size += 1UL * this->_internal_classvalues_size();
  for (const auto& msg : this->classvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ObjectValues integrityValues = 6;
  total_size += 1UL * this->_internal_integrityvalues_size();
  for (const auto& msg : this->integrityvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool integrity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool class1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool class2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool class3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadCommandClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReadCommandClass)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadCommandClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadCommandClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReadCommandClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReadCommandClass)
    MergeFrom(*source);
  }
}

void ReadCommandClass::MergeFrom(const ReadCommandClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReadCommandClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classvalues_.MergeFrom(from.classvalues_);
  integrityvalues_.MergeFrom(from.integrityvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      integrity_ = from.integrity_;
    }
    if (cached_has_bits & 0x00000002u) {
      class1_ = from.class1_;
    }
    if (cached_has_bits & 0x00000004u) {
      class2_ = from.class2_;
    }
    if (cached_has_bits & 0x00000008u) {
      class3_ = from.class3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadCommandClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReadCommandClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadCommandClass::CopyFrom(const ReadCommandClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReadCommandClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadCommandClass::IsInitialized() const {
  return true;
}

void ReadCommandClass::InternalSwap(ReadCommandClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  classvalues_.InternalSwap(&other->classvalues_);
  integrityvalues_.InternalSwap(&other->integrityvalues_);
  swap(integrity_, other->integrity_);
  swap(class1_, other->class1_);
  swap(class2_, other->class2_);
  swap(class3_, other->class3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadCommandClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RTCCommands::InitAsDefaultInstance() {
}
class RTCCommands::_Internal {
 public:
  using HasBits = decltype(std::declval<RTCCommands>()._has_bits_);
  static void set_has_write(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtcdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RTCCommands::RTCCommands()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTCCommands)
}
RTCCommands::RTCCommands(const RTCCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rtcdata_, &from.rtcdata_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_) -
    reinterpret_cast<char*>(&rtcdata_)) + sizeof(read_));
  // @@protoc_insertion_point(copy_constructor:RTCCommands)
}

void RTCCommands::SharedCtor() {
  ::memset(&rtcdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_) -
      reinterpret_cast<char*>(&rtcdata_)) + sizeof(read_));
}

RTCCommands::~RTCCommands() {
  // @@protoc_insertion_point(destructor:RTCCommands)
  SharedDtor();
}

void RTCCommands::SharedDtor() {
}

void RTCCommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTCCommands& RTCCommands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RTCCommands_command_2eproto.base);
  return *internal_default_instance();
}


void RTCCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:RTCCommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rtcdata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&read_) -
        reinterpret_cast<char*>(&rtcdata_)) + sizeof(read_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RTCCommands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool write = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_write(&has_bits);
          write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rtcdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rtcdata(&has_bits);
          rtcdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool read = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_read(&has_bits);
          read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTCCommands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTCCommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool write = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_write(), target);
  }

  // optional int64 rtcdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_rtcdata(), target);
  }

  // optional bool read = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTCCommands)
  return target;
}

size_t RTCCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTCCommands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 rtcdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rtcdata());
    }

    // optional bool write = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool read = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTCCommands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RTCCommands)
  GOOGLE_DCHECK_NE(&from, this);
  const RTCCommands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTCCommands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RTCCommands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RTCCommands)
    MergeFrom(*source);
  }
}

void RTCCommands::MergeFrom(const RTCCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTCCommands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rtcdata_ = from.rtcdata_;
    }
    if (cached_has_bits & 0x00000002u) {
      write_ = from.write_;
    }
    if (cached_has_bits & 0x00000004u) {
      read_ = from.read_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTCCommands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RTCCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTCCommands::CopyFrom(const RTCCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTCCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTCCommands::IsInitialized() const {
  return true;
}

void RTCCommands::InternalSwap(RTCCommands* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rtcdata_, other->rtcdata_);
  swap(write_, other->write_);
  swap(read_, other->read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTCCommands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Commands::InitAsDefaultInstance() {
  ::_Commands_default_instance_._instance.get_mutable()->digcmd_ = const_cast< ::DigitalCommand*>(
      ::DigitalCommand::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->readclass_ = const_cast< ::ReadCommandClass*>(
      ::ReadCommandClass::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->rtccmd_ = const_cast< ::RTCCommands*>(
      ::RTCCommands::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->analogcmd_ = const_cast< ::AnalogCommand*>(
      ::AnalogCommand::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->logcmd_ = const_cast< ::LoggerCommand*>(
      ::LoggerCommand::internal_default_instance());
  ::_Commands_default_instance_._instance.get_mutable()->threadcmd_ = const_cast< ::ThreadCommand*>(
      ::ThreadCommand::internal_default_instance());
}
class Commands::_Internal {
 public:
  using HasBits = decltype(std::declval<Commands>()._has_bits_);
  static const ::DigitalCommand& digcmd(const Commands* msg);
  static void set_has_digcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ReadCommandClass& readclass(const Commands* msg);
  static void set_has_readclass(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RTCCommands& rtccmd(const Commands* msg);
  static void set_has_rtccmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enablepoll(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::AnalogCommand& analogcmd(const Commands* msg);
  static void set_has_analogcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::LoggerCommand& logcmd(const Commands* msg);
  static void set_has_logcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ThreadCommand& threadcmd(const Commands* msg);
  static void set_has_threadcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::DigitalCommand&
Commands::_Internal::digcmd(const Commands* msg) {
  return *msg->digcmd_;
}
const ::ReadCommandClass&
Commands::_Internal::readclass(const Commands* msg) {
  return *msg->readclass_;
}
const ::RTCCommands&
Commands::_Internal::rtccmd(const Commands* msg) {
  return *msg->rtccmd_;
}
const ::AnalogCommand&
Commands::_Internal::analogcmd(const Commands* msg) {
  return *msg->analogcmd_;
}
const ::LoggerCommand&
Commands::_Internal::logcmd(const Commands* msg) {
  return *msg->logcmd_;
}
const ::ThreadCommand&
Commands::_Internal::threadcmd(const Commands* msg) {
  return *msg->threadcmd_;
}
Commands::Commands()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Commands)
}
Commands::Commands(const Commands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_digcmd()) {
    digcmd_ = new ::DigitalCommand(*from.digcmd_);
  } else {
    digcmd_ = nullptr;
  }
  if (from._internal_has_readclass()) {
    readclass_ = new ::ReadCommandClass(*from.readclass_);
  } else {
    readclass_ = nullptr;
  }
  if (from._internal_has_rtccmd()) {
    rtccmd_ = new ::RTCCommands(*from.rtccmd_);
  } else {
    rtccmd_ = nullptr;
  }
  if (from._internal_has_analogcmd()) {
    analogcmd_ = new ::AnalogCommand(*from.analogcmd_);
  } else {
    analogcmd_ = nullptr;
  }
  if (from._internal_has_logcmd()) {
    logcmd_ = new ::LoggerCommand(*from.logcmd_);
  } else {
    logcmd_ = nullptr;
  }
  if (from._internal_has_threadcmd()) {
    threadcmd_ = new ::ThreadCommand(*from.threadcmd_);
  } else {
    threadcmd_ = nullptr;
  }
  ::memcpy(&enablepoll_, &from.enablepoll_,
    static_cast<size_t>(reinterpret_cast<char*>(&attempts_) -
    reinterpret_cast<char*>(&enablepoll_)) + sizeof(attempts_));
  // @@protoc_insertion_point(copy_constructor:Commands)
}

void Commands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Commands_command_2eproto.base);
  ::memset(&digcmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attempts_) -
      reinterpret_cast<char*>(&digcmd_)) + sizeof(attempts_));
}

Commands::~Commands() {
  // @@protoc_insertion_point(destructor:Commands)
  SharedDtor();
}

void Commands::SharedDtor() {
  if (this != internal_default_instance()) delete digcmd_;
  if (this != internal_default_instance()) delete readclass_;
  if (this != internal_default_instance()) delete rtccmd_;
  if (this != internal_default_instance()) delete analogcmd_;
  if (this != internal_default_instance()) delete logcmd_;
  if (this != internal_default_instance()) delete threadcmd_;
}

void Commands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Commands& Commands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Commands_command_2eproto.base);
  return *internal_default_instance();
}


void Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(digcmd_ != nullptr);
      digcmd_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(readclass_ != nullptr);
      readclass_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rtccmd_ != nullptr);
      rtccmd_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(analogcmd_ != nullptr);
      analogcmd_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(logcmd_ != nullptr);
      logcmd_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(threadcmd_ != nullptr);
      threadcmd_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&enablepoll_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attempts_) -
        reinterpret_cast<char*>(&enablepoll_)) + sizeof(attempts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Commands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DigitalCommand digCmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_digcmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ReadCommandClass readClass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_readclass(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RTCCommands rtcCmd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtccmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enablePoll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enablepoll(&has_bits);
          enablepoll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attempts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_attempts(&has_bits);
          attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AnalogCommand analogCmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_analogcmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LoggerCommand logCmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_logcmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ThreadCommand threadCmd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_threadcmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Commands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Commands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DigitalCommand digCmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::digcmd(this), target, stream);
  }

  // optional .ReadCommandClass readClass = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::readclass(this), target, stream);
  }

  // optional .RTCCommands rtcCmd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rtccmd(this), target, stream);
  }

  // optional bool enablePoll = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enablepoll(), target);
  }

  // optional uint32 attempts = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_attempts(), target);
  }

  // optional .AnalogCommand analogCmd = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::analogcmd(this), target, stream);
  }

  // optional .LoggerCommand logCmd = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::logcmd(this), target, stream);
  }

  // optional .ThreadCommand threadCmd = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::threadcmd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Commands)
  return target;
}

size_t Commands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Commands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DigitalCommand digCmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *digcmd_);
    }

    // optional .ReadCommandClass readClass = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *readclass_);
    }

    // optional .RTCCommands rtcCmd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rtccmd_);
    }

    // optional .AnalogCommand analogCmd = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *analogcmd_);
    }

    // optional .LoggerCommand logCmd = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logcmd_);
    }

    // optional .ThreadCommand threadCmd = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threadcmd_);
    }

    // optional bool enablePoll = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 attempts = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attempts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Commands)
  GOOGLE_DCHECK_NE(&from, this);
  const Commands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Commands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Commands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Commands)
    MergeFrom(*source);
  }
}

void Commands::MergeFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Commands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_digcmd()->::DigitalCommand::MergeFrom(from._internal_digcmd());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_readclass()->::ReadCommandClass::MergeFrom(from._internal_readclass());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rtccmd()->::RTCCommands::MergeFrom(from._internal_rtccmd());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_analogcmd()->::AnalogCommand::MergeFrom(from._internal_analogcmd());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_logcmd()->::LoggerCommand::MergeFrom(from._internal_logcmd());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_threadcmd()->::ThreadCommand::MergeFrom(from._internal_threadcmd());
    }
    if (cached_has_bits & 0x00000040u) {
      enablepoll_ = from.enablepoll_;
    }
    if (cached_has_bits & 0x00000080u) {
      attempts_ = from.attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Commands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commands::CopyFrom(const Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commands::IsInitialized() const {
  if (_internal_has_logcmd()) {
    if (!logcmd_->IsInitialized()) return false;
  }
  if (_internal_has_threadcmd()) {
    if (!threadcmd_->IsInitialized()) return false;
  }
  return true;
}

void Commands::InternalSwap(Commands* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(digcmd_, other->digcmd_);
  swap(readclass_, other->readclass_);
  swap(rtccmd_, other->rtccmd_);
  swap(analogcmd_, other->analogcmd_);
  swap(logcmd_, other->logcmd_);
  swap(threadcmd_, other->threadcmd_);
  swap(enablepoll_, other->enablepoll_);
  swap(attempts_, other->attempts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Commands::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LoggerCommand* Arena::CreateMaybeMessage< ::LoggerCommand >(Arena* arena) {
  return Arena::CreateInternal< ::LoggerCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ThreadCommand* Arena::CreateMaybeMessage< ::ThreadCommand >(Arena* arena) {
  return Arena::CreateInternal< ::ThreadCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitalCommand* Arena::CreateMaybeMessage< ::DigitalCommand >(Arena* arena) {
  return Arena::CreateInternal< ::DigitalCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::AnalogCommand* Arena::CreateMaybeMessage< ::AnalogCommand >(Arena* arena) {
  return Arena::CreateInternal< ::AnalogCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::FileCommand* Arena::CreateMaybeMessage< ::FileCommand >(Arena* arena) {
  return Arena::CreateInternal< ::FileCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ReadCommandClass* Arena::CreateMaybeMessage< ::ReadCommandClass >(Arena* arena) {
  return Arena::CreateInternal< ::ReadCommandClass >(arena);
}
template<> PROTOBUF_NOINLINE ::RTCCommands* Arena::CreateMaybeMessage< ::RTCCommands >(Arena* arena) {
  return Arena::CreateInternal< ::RTCCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::Commands* Arena::CreateMaybeMessage< ::Commands >(Arena* arena) {
  return Arena::CreateInternal< ::Commands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
