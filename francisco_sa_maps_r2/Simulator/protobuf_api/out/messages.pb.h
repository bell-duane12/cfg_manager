// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "config.pb.h"
#include "command.pb.h"
#include "objects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class CheckGateway;
class CheckGatewayDefaultTypeInternal;
extern CheckGatewayDefaultTypeInternal _CheckGateway_default_instance_;
class EquipmentStatus;
class EquipmentStatusDefaultTypeInternal;
extern EquipmentStatusDefaultTypeInternal _EquipmentStatus_default_instance_;
class GatewayStatus;
class GatewayStatusDefaultTypeInternal;
extern GatewayStatusDefaultTypeInternal _GatewayStatus_default_instance_;
class NotificationToServer;
class NotificationToServerDefaultTypeInternal;
extern NotificationToServerDefaultTypeInternal _NotificationToServer_default_instance_;
class NotificationValues;
class NotificationValuesDefaultTypeInternal;
extern NotificationValuesDefaultTypeInternal _NotificationValues_default_instance_;
class UploadToGateway;
class UploadToGatewayDefaultTypeInternal;
extern UploadToGatewayDefaultTypeInternal _UploadToGateway_default_instance_;
class UploadToServer;
class UploadToServerDefaultTypeInternal;
extern UploadToServerDefaultTypeInternal _UploadToServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CheckGateway* Arena::CreateMaybeMessage<::CheckGateway>(Arena*);
template<> ::EquipmentStatus* Arena::CreateMaybeMessage<::EquipmentStatus>(Arena*);
template<> ::GatewayStatus* Arena::CreateMaybeMessage<::GatewayStatus>(Arena*);
template<> ::NotificationToServer* Arena::CreateMaybeMessage<::NotificationToServer>(Arena*);
template<> ::NotificationValues* Arena::CreateMaybeMessage<::NotificationValues>(Arena*);
template<> ::UploadToGateway* Arena::CreateMaybeMessage<::UploadToGateway>(Arena*);
template<> ::UploadToServer* Arena::CreateMaybeMessage<::UploadToServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GatewayStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GatewayStatus) */ {
 public:
  GatewayStatus();
  virtual ~GatewayStatus();

  GatewayStatus(const GatewayStatus& from);
  GatewayStatus(GatewayStatus&& from) noexcept
    : GatewayStatus() {
    *this = ::std::move(from);
  }

  inline GatewayStatus& operator=(const GatewayStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GatewayStatus& operator=(GatewayStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GatewayStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatewayStatus* internal_default_instance() {
    return reinterpret_cast<const GatewayStatus*>(
               &_GatewayStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GatewayStatus& a, GatewayStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GatewayStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GatewayStatus* New() const final {
    return CreateMaybeMessage<GatewayStatus>(nullptr);
  }

  GatewayStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GatewayStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GatewayStatus& from);
  void MergeFrom(const GatewayStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GatewayStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GatewayStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUptimeFieldNumber = 2,
    kTimeStampFieldNumber = 3,
    kConfiguredFieldNumber = 1,
    kOnlineFieldNumber = 4,
  };
  // optional int64 uptime = 2;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timeStamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool configured = 1;
  bool has_configured() const;
  private:
  bool _internal_has_configured() const;
  public:
  void clear_configured();
  bool configured() const;
  void set_configured(bool value);
  private:
  bool _internal_configured() const;
  void _internal_set_configured(bool value);
  public:

  // optional bool online = 4;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GatewayStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool configured_;
  bool online_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EquipmentStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EquipmentStatus) */ {
 public:
  EquipmentStatus();
  virtual ~EquipmentStatus();

  EquipmentStatus(const EquipmentStatus& from);
  EquipmentStatus(EquipmentStatus&& from) noexcept
    : EquipmentStatus() {
    *this = ::std::move(from);
  }

  inline EquipmentStatus& operator=(const EquipmentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentStatus& operator=(EquipmentStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EquipmentStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipmentStatus* internal_default_instance() {
    return reinterpret_cast<const EquipmentStatus*>(
               &_EquipmentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EquipmentStatus& a, EquipmentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquipmentStatus* New() const final {
    return CreateMaybeMessage<EquipmentStatus>(nullptr);
  }

  EquipmentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquipmentStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquipmentStatus& from);
  void MergeFrom(const EquipmentStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipmentStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EquipmentStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommUpTimeFieldNumber = 2,
    kTimeStampFieldNumber = 4,
    kOnlineFieldNumber = 1,
    kUNSFieldNumber = 3,
  };
  // optional int64 commUpTime = 2;
  bool has_commuptime() const;
  private:
  bool _internal_has_commuptime() const;
  public:
  void clear_commuptime();
  ::PROTOBUF_NAMESPACE_ID::int64 commuptime() const;
  void set_commuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commuptime() const;
  void _internal_set_commuptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timeStamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool online = 1;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // optional bool UNS = 3;
  bool has_uns() const;
  private:
  bool _internal_has_uns() const;
  public:
  void clear_uns();
  bool uns() const;
  void set_uns(bool value);
  private:
  bool _internal_uns() const;
  void _internal_set_uns(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EquipmentStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 commuptime_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool online_;
  bool uns_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UploadToGateway :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UploadToGateway) */ {
 public:
  UploadToGateway();
  virtual ~UploadToGateway();

  UploadToGateway(const UploadToGateway& from);
  UploadToGateway(UploadToGateway&& from) noexcept
    : UploadToGateway() {
    *this = ::std::move(from);
  }

  inline UploadToGateway& operator=(const UploadToGateway& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadToGateway& operator=(UploadToGateway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadToGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadToGateway* internal_default_instance() {
    return reinterpret_cast<const UploadToGateway*>(
               &_UploadToGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadToGateway& a, UploadToGateway& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadToGateway* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadToGateway* New() const final {
    return CreateMaybeMessage<UploadToGateway>(nullptr);
  }

  UploadToGateway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadToGateway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadToGateway& from);
  void MergeFrom(const UploadToGateway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadToGateway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UploadToGateway";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kConfigGwFieldNumber = 2,
    kCmdFieldNumber = 3,
    kCheckGwFieldNumber = 4,
    kEqpStatusFieldNumber = 5,
  };
  // required .HeaderMessage header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::HeaderMessage& header() const;
  ::HeaderMessage* release_header();
  ::HeaderMessage* mutable_header();
  void set_allocated_header(::HeaderMessage* header);
  private:
  const ::HeaderMessage& _internal_header() const;
  ::HeaderMessage* _internal_mutable_header();
  public:

  // optional .ConfigGateway configGw = 2;
  bool has_configgw() const;
  private:
  bool _internal_has_configgw() const;
  public:
  void clear_configgw();
  const ::ConfigGateway& configgw() const;
  ::ConfigGateway* release_configgw();
  ::ConfigGateway* mutable_configgw();
  void set_allocated_configgw(::ConfigGateway* configgw);
  private:
  const ::ConfigGateway& _internal_configgw() const;
  ::ConfigGateway* _internal_mutable_configgw();
  public:

  // optional .Commands cmd = 3;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::Commands& cmd() const;
  ::Commands* release_cmd();
  ::Commands* mutable_cmd();
  void set_allocated_cmd(::Commands* cmd);
  private:
  const ::Commands& _internal_cmd() const;
  ::Commands* _internal_mutable_cmd();
  public:

  // optional .CheckGateway checkGw = 4;
  bool has_checkgw() const;
  private:
  bool _internal_has_checkgw() const;
  public:
  void clear_checkgw();
  const ::CheckGateway& checkgw() const;
  ::CheckGateway* release_checkgw();
  ::CheckGateway* mutable_checkgw();
  void set_allocated_checkgw(::CheckGateway* checkgw);
  private:
  const ::CheckGateway& _internal_checkgw() const;
  ::CheckGateway* _internal_mutable_checkgw();
  public:

  // optional .EquipmentStatus eqpStatus = 5;
  bool has_eqpstatus() const;
  private:
  bool _internal_has_eqpstatus() const;
  public:
  void clear_eqpstatus();
  const ::EquipmentStatus& eqpstatus() const;
  ::EquipmentStatus* release_eqpstatus();
  ::EquipmentStatus* mutable_eqpstatus();
  void set_allocated_eqpstatus(::EquipmentStatus* eqpstatus);
  private:
  const ::EquipmentStatus& _internal_eqpstatus() const;
  ::EquipmentStatus* _internal_mutable_eqpstatus();
  public:

  // @@protoc_insertion_point(class_scope:UploadToGateway)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::HeaderMessage* header_;
  ::ConfigGateway* configgw_;
  ::Commands* cmd_;
  ::CheckGateway* checkgw_;
  ::EquipmentStatus* eqpstatus_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class CheckGateway :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckGateway) */ {
 public:
  CheckGateway();
  virtual ~CheckGateway();

  CheckGateway(const CheckGateway& from);
  CheckGateway(CheckGateway&& from) noexcept
    : CheckGateway() {
    *this = ::std::move(from);
  }

  inline CheckGateway& operator=(const CheckGateway& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckGateway& operator=(CheckGateway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckGateway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckGateway* internal_default_instance() {
    return reinterpret_cast<const CheckGateway*>(
               &_CheckGateway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckGateway& a, CheckGateway& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckGateway* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckGateway* New() const final {
    return CreateMaybeMessage<CheckGateway>(nullptr);
  }

  CheckGateway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckGateway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckGateway& from);
  void MergeFrom(const CheckGateway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckGateway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckGateway";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAliveFieldNumber = 1,
  };
  // required bool isAlive = 1;
  bool has_isalive() const;
  private:
  bool _internal_has_isalive() const;
  public:
  void clear_isalive();
  bool isalive() const;
  void set_isalive(bool value);
  private:
  bool _internal_isalive() const;
  void _internal_set_isalive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CheckGateway)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool isalive_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UploadToServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UploadToServer) */ {
 public:
  UploadToServer();
  virtual ~UploadToServer();

  UploadToServer(const UploadToServer& from);
  UploadToServer(UploadToServer&& from) noexcept
    : UploadToServer() {
    *this = ::std::move(from);
  }

  inline UploadToServer& operator=(const UploadToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadToServer& operator=(UploadToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadToServer* internal_default_instance() {
    return reinterpret_cast<const UploadToServer*>(
               &_UploadToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UploadToServer& a, UploadToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadToServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadToServer* New() const final {
    return CreateMaybeMessage<UploadToServer>(nullptr);
  }

  UploadToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadToServer& from);
  void MergeFrom(const UploadToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UploadToServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGwStatusFieldNumber = 2,
    kEqpStatusFieldNumber = 3,
    kConfigGwResponseFieldNumber = 4,
    kCmdFieldNumber = 5,
  };
  // required .HeaderMessage header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::HeaderMessage& header() const;
  ::HeaderMessage* release_header();
  ::HeaderMessage* mutable_header();
  void set_allocated_header(::HeaderMessage* header);
  private:
  const ::HeaderMessage& _internal_header() const;
  ::HeaderMessage* _internal_mutable_header();
  public:

  // optional .GatewayStatus gwStatus = 2;
  bool has_gwstatus() const;
  private:
  bool _internal_has_gwstatus() const;
  public:
  void clear_gwstatus();
  const ::GatewayStatus& gwstatus() const;
  ::GatewayStatus* release_gwstatus();
  ::GatewayStatus* mutable_gwstatus();
  void set_allocated_gwstatus(::GatewayStatus* gwstatus);
  private:
  const ::GatewayStatus& _internal_gwstatus() const;
  ::GatewayStatus* _internal_mutable_gwstatus();
  public:

  // optional .EquipmentStatus eqpStatus = 3;
  bool has_eqpstatus() const;
  private:
  bool _internal_has_eqpstatus() const;
  public:
  void clear_eqpstatus();
  const ::EquipmentStatus& eqpstatus() const;
  ::EquipmentStatus* release_eqpstatus();
  ::EquipmentStatus* mutable_eqpstatus();
  void set_allocated_eqpstatus(::EquipmentStatus* eqpstatus);
  private:
  const ::EquipmentStatus& _internal_eqpstatus() const;
  ::EquipmentStatus* _internal_mutable_eqpstatus();
  public:

  // optional .ConfigGatewayResponse configGwResponse = 4;
  bool has_configgwresponse() const;
  private:
  bool _internal_has_configgwresponse() const;
  public:
  void clear_configgwresponse();
  const ::ConfigGatewayResponse& configgwresponse() const;
  ::ConfigGatewayResponse* release_configgwresponse();
  ::ConfigGatewayResponse* mutable_configgwresponse();
  void set_allocated_configgwresponse(::ConfigGatewayResponse* configgwresponse);
  private:
  const ::ConfigGatewayResponse& _internal_configgwresponse() const;
  ::ConfigGatewayResponse* _internal_mutable_configgwresponse();
  public:

  // optional .Commands cmd = 5;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::Commands& cmd() const;
  ::Commands* release_cmd();
  ::Commands* mutable_cmd();
  void set_allocated_cmd(::Commands* cmd);
  private:
  const ::Commands& _internal_cmd() const;
  ::Commands* _internal_mutable_cmd();
  public:

  // @@protoc_insertion_point(class_scope:UploadToServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::HeaderMessage* header_;
  ::GatewayStatus* gwstatus_;
  ::EquipmentStatus* eqpstatus_;
  ::ConfigGatewayResponse* configgwresponse_;
  ::Commands* cmd_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NotificationValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotificationValues) */ {
 public:
  NotificationValues();
  virtual ~NotificationValues();

  NotificationValues(const NotificationValues& from);
  NotificationValues(NotificationValues&& from) noexcept
    : NotificationValues() {
    *this = ::std::move(from);
  }

  inline NotificationValues& operator=(const NotificationValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationValues& operator=(NotificationValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationValues* internal_default_instance() {
    return reinterpret_cast<const NotificationValues*>(
               &_NotificationValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NotificationValues& a, NotificationValues& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationValues* New() const final {
    return CreateMaybeMessage<NotificationValues>(nullptr);
  }

  NotificationValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationValues& from);
  void MergeFrom(const NotificationValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotificationValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmListFieldNumber = 1,
    kStaticListFieldNumber = 2,
  };
  // repeated .ObjectValues alarmList = 1;
  int alarmlist_size() const;
  private:
  int _internal_alarmlist_size() const;
  public:
  void clear_alarmlist();
  ::ObjectValues* mutable_alarmlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
      mutable_alarmlist();
  private:
  const ::ObjectValues& _internal_alarmlist(int index) const;
  ::ObjectValues* _internal_add_alarmlist();
  public:
  const ::ObjectValues& alarmlist(int index) const;
  ::ObjectValues* add_alarmlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
      alarmlist() const;

  // repeated .ObjectValues staticList = 2;
  int staticlist_size() const;
  private:
  int _internal_staticlist_size() const;
  public:
  void clear_staticlist();
  ::ObjectValues* mutable_staticlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
      mutable_staticlist();
  private:
  const ::ObjectValues& _internal_staticlist(int index) const;
  ::ObjectValues* _internal_add_staticlist();
  public:
  const ::ObjectValues& staticlist(int index) const;
  ::ObjectValues* add_staticlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
      staticlist() const;

  // @@protoc_insertion_point(class_scope:NotificationValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues > alarmlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues > staticlist_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class NotificationToServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NotificationToServer) */ {
 public:
  NotificationToServer();
  virtual ~NotificationToServer();

  NotificationToServer(const NotificationToServer& from);
  NotificationToServer(NotificationToServer&& from) noexcept
    : NotificationToServer() {
    *this = ::std::move(from);
  }

  inline NotificationToServer& operator=(const NotificationToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationToServer& operator=(NotificationToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationToServer* internal_default_instance() {
    return reinterpret_cast<const NotificationToServer*>(
               &_NotificationToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NotificationToServer& a, NotificationToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationToServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationToServer* New() const final {
    return CreateMaybeMessage<NotificationToServer>(nullptr);
  }

  NotificationToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationToServer& from);
  void MergeFrom(const NotificationToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NotificationToServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kEqpStatusFieldNumber = 2,
    kGwStatusFieldNumber = 3,
    kNotificationvalFieldNumber = 4,
  };
  // required .HeaderMessage header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::HeaderMessage& header() const;
  ::HeaderMessage* release_header();
  ::HeaderMessage* mutable_header();
  void set_allocated_header(::HeaderMessage* header);
  private:
  const ::HeaderMessage& _internal_header() const;
  ::HeaderMessage* _internal_mutable_header();
  public:

  // optional .EquipmentStatus eqpStatus = 2;
  bool has_eqpstatus() const;
  private:
  bool _internal_has_eqpstatus() const;
  public:
  void clear_eqpstatus();
  const ::EquipmentStatus& eqpstatus() const;
  ::EquipmentStatus* release_eqpstatus();
  ::EquipmentStatus* mutable_eqpstatus();
  void set_allocated_eqpstatus(::EquipmentStatus* eqpstatus);
  private:
  const ::EquipmentStatus& _internal_eqpstatus() const;
  ::EquipmentStatus* _internal_mutable_eqpstatus();
  public:

  // optional .GatewayStatus gwStatus = 3;
  bool has_gwstatus() const;
  private:
  bool _internal_has_gwstatus() const;
  public:
  void clear_gwstatus();
  const ::GatewayStatus& gwstatus() const;
  ::GatewayStatus* release_gwstatus();
  ::GatewayStatus* mutable_gwstatus();
  void set_allocated_gwstatus(::GatewayStatus* gwstatus);
  private:
  const ::GatewayStatus& _internal_gwstatus() const;
  ::GatewayStatus* _internal_mutable_gwstatus();
  public:

  // optional .NotificationValues notificationval = 4;
  bool has_notificationval() const;
  private:
  bool _internal_has_notificationval() const;
  public:
  void clear_notificationval();
  const ::NotificationValues& notificationval() const;
  ::NotificationValues* release_notificationval();
  ::NotificationValues* mutable_notificationval();
  void set_allocated_notificationval(::NotificationValues* notificationval);
  private:
  const ::NotificationValues& _internal_notificationval() const;
  ::NotificationValues* _internal_mutable_notificationval();
  public:

  // @@protoc_insertion_point(class_scope:NotificationToServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::HeaderMessage* header_;
  ::EquipmentStatus* eqpstatus_;
  ::GatewayStatus* gwstatus_;
  ::NotificationValues* notificationval_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GatewayStatus

// optional bool configured = 1;
inline bool GatewayStatus::_internal_has_configured() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GatewayStatus::has_configured() const {
  return _internal_has_configured();
}
inline void GatewayStatus::clear_configured() {
  configured_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GatewayStatus::_internal_configured() const {
  return configured_;
}
inline bool GatewayStatus::configured() const {
  // @@protoc_insertion_point(field_get:GatewayStatus.configured)
  return _internal_configured();
}
inline void GatewayStatus::_internal_set_configured(bool value) {
  _has_bits_[0] |= 0x00000004u;
  configured_ = value;
}
inline void GatewayStatus::set_configured(bool value) {
  _internal_set_configured(value);
  // @@protoc_insertion_point(field_set:GatewayStatus.configured)
}

// optional int64 uptime = 2;
inline bool GatewayStatus::_internal_has_uptime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GatewayStatus::has_uptime() const {
  return _internal_has_uptime();
}
inline void GatewayStatus::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GatewayStatus::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GatewayStatus::uptime() const {
  // @@protoc_insertion_point(field_get:GatewayStatus.uptime)
  return _internal_uptime();
}
inline void GatewayStatus::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  uptime_ = value;
}
inline void GatewayStatus::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:GatewayStatus.uptime)
}

// optional int64 timeStamp = 3;
inline bool GatewayStatus::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GatewayStatus::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void GatewayStatus::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GatewayStatus::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GatewayStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:GatewayStatus.timeStamp)
  return _internal_timestamp();
}
inline void GatewayStatus::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void GatewayStatus::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:GatewayStatus.timeStamp)
}

// optional bool online = 4;
inline bool GatewayStatus::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GatewayStatus::has_online() const {
  return _internal_has_online();
}
inline void GatewayStatus::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GatewayStatus::_internal_online() const {
  return online_;
}
inline bool GatewayStatus::online() const {
  // @@protoc_insertion_point(field_get:GatewayStatus.online)
  return _internal_online();
}
inline void GatewayStatus::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000008u;
  online_ = value;
}
inline void GatewayStatus::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:GatewayStatus.online)
}

// -------------------------------------------------------------------

// EquipmentStatus

// optional bool online = 1;
inline bool EquipmentStatus::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EquipmentStatus::has_online() const {
  return _internal_has_online();
}
inline void EquipmentStatus::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool EquipmentStatus::_internal_online() const {
  return online_;
}
inline bool EquipmentStatus::online() const {
  // @@protoc_insertion_point(field_get:EquipmentStatus.online)
  return _internal_online();
}
inline void EquipmentStatus::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000004u;
  online_ = value;
}
inline void EquipmentStatus::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:EquipmentStatus.online)
}

// optional int64 commUpTime = 2;
inline bool EquipmentStatus::_internal_has_commuptime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EquipmentStatus::has_commuptime() const {
  return _internal_has_commuptime();
}
inline void EquipmentStatus::clear_commuptime() {
  commuptime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EquipmentStatus::_internal_commuptime() const {
  return commuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EquipmentStatus::commuptime() const {
  // @@protoc_insertion_point(field_get:EquipmentStatus.commUpTime)
  return _internal_commuptime();
}
inline void EquipmentStatus::_internal_set_commuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  commuptime_ = value;
}
inline void EquipmentStatus::set_commuptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commuptime(value);
  // @@protoc_insertion_point(field_set:EquipmentStatus.commUpTime)
}

// optional bool UNS = 3;
inline bool EquipmentStatus::_internal_has_uns() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EquipmentStatus::has_uns() const {
  return _internal_has_uns();
}
inline void EquipmentStatus::clear_uns() {
  uns_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool EquipmentStatus::_internal_uns() const {
  return uns_;
}
inline bool EquipmentStatus::uns() const {
  // @@protoc_insertion_point(field_get:EquipmentStatus.UNS)
  return _internal_uns();
}
inline void EquipmentStatus::_internal_set_uns(bool value) {
  _has_bits_[0] |= 0x00000008u;
  uns_ = value;
}
inline void EquipmentStatus::set_uns(bool value) {
  _internal_set_uns(value);
  // @@protoc_insertion_point(field_set:EquipmentStatus.UNS)
}

// optional int64 timeStamp = 4;
inline bool EquipmentStatus::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EquipmentStatus::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void EquipmentStatus::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EquipmentStatus::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EquipmentStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:EquipmentStatus.timeStamp)
  return _internal_timestamp();
}
inline void EquipmentStatus::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void EquipmentStatus::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:EquipmentStatus.timeStamp)
}

// -------------------------------------------------------------------

// UploadToGateway

// required .HeaderMessage header = 1;
inline bool UploadToGateway::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool UploadToGateway::has_header() const {
  return _internal_has_header();
}
inline const ::HeaderMessage& UploadToGateway::_internal_header() const {
  const ::HeaderMessage* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HeaderMessage*>(
      &::_HeaderMessage_default_instance_);
}
inline const ::HeaderMessage& UploadToGateway::header() const {
  // @@protoc_insertion_point(field_get:UploadToGateway.header)
  return _internal_header();
}
inline ::HeaderMessage* UploadToGateway::release_header() {
  // @@protoc_insertion_point(field_release:UploadToGateway.header)
  _has_bits_[0] &= ~0x00000001u;
  ::HeaderMessage* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::HeaderMessage* UploadToGateway::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::HeaderMessage>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::HeaderMessage* UploadToGateway::mutable_header() {
  // @@protoc_insertion_point(field_mutable:UploadToGateway.header)
  return _internal_mutable_header();
}
inline void UploadToGateway::set_allocated_header(::HeaderMessage* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:UploadToGateway.header)
}

// optional .ConfigGateway configGw = 2;
inline bool UploadToGateway::_internal_has_configgw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || configgw_ != nullptr);
  return value;
}
inline bool UploadToGateway::has_configgw() const {
  return _internal_has_configgw();
}
inline const ::ConfigGateway& UploadToGateway::_internal_configgw() const {
  const ::ConfigGateway* p = configgw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConfigGateway*>(
      &::_ConfigGateway_default_instance_);
}
inline const ::ConfigGateway& UploadToGateway::configgw() const {
  // @@protoc_insertion_point(field_get:UploadToGateway.configGw)
  return _internal_configgw();
}
inline ::ConfigGateway* UploadToGateway::release_configgw() {
  // @@protoc_insertion_point(field_release:UploadToGateway.configGw)
  _has_bits_[0] &= ~0x00000002u;
  ::ConfigGateway* temp = configgw_;
  configgw_ = nullptr;
  return temp;
}
inline ::ConfigGateway* UploadToGateway::_internal_mutable_configgw() {
  _has_bits_[0] |= 0x00000002u;
  if (configgw_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConfigGateway>(GetArenaNoVirtual());
    configgw_ = p;
  }
  return configgw_;
}
inline ::ConfigGateway* UploadToGateway::mutable_configgw() {
  // @@protoc_insertion_point(field_mutable:UploadToGateway.configGw)
  return _internal_mutable_configgw();
}
inline void UploadToGateway::set_allocated_configgw(::ConfigGateway* configgw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configgw_);
  }
  if (configgw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configgw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configgw, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  configgw_ = configgw;
  // @@protoc_insertion_point(field_set_allocated:UploadToGateway.configGw)
}

// optional .Commands cmd = 3;
inline bool UploadToGateway::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cmd_ != nullptr);
  return value;
}
inline bool UploadToGateway::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::Commands& UploadToGateway::_internal_cmd() const {
  const ::Commands* p = cmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Commands*>(
      &::_Commands_default_instance_);
}
inline const ::Commands& UploadToGateway::cmd() const {
  // @@protoc_insertion_point(field_get:UploadToGateway.cmd)
  return _internal_cmd();
}
inline ::Commands* UploadToGateway::release_cmd() {
  // @@protoc_insertion_point(field_release:UploadToGateway.cmd)
  _has_bits_[0] &= ~0x00000004u;
  ::Commands* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::Commands* UploadToGateway::_internal_mutable_cmd() {
  _has_bits_[0] |= 0x00000004u;
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::Commands>(GetArenaNoVirtual());
    cmd_ = p;
  }
  return cmd_;
}
inline ::Commands* UploadToGateway::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:UploadToGateway.cmd)
  return _internal_mutable_cmd();
}
inline void UploadToGateway::set_allocated_cmd(::Commands* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:UploadToGateway.cmd)
}

// optional .CheckGateway checkGw = 4;
inline bool UploadToGateway::_internal_has_checkgw() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || checkgw_ != nullptr);
  return value;
}
inline bool UploadToGateway::has_checkgw() const {
  return _internal_has_checkgw();
}
inline void UploadToGateway::clear_checkgw() {
  if (checkgw_ != nullptr) checkgw_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CheckGateway& UploadToGateway::_internal_checkgw() const {
  const ::CheckGateway* p = checkgw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CheckGateway*>(
      &::_CheckGateway_default_instance_);
}
inline const ::CheckGateway& UploadToGateway::checkgw() const {
  // @@protoc_insertion_point(field_get:UploadToGateway.checkGw)
  return _internal_checkgw();
}
inline ::CheckGateway* UploadToGateway::release_checkgw() {
  // @@protoc_insertion_point(field_release:UploadToGateway.checkGw)
  _has_bits_[0] &= ~0x00000008u;
  ::CheckGateway* temp = checkgw_;
  checkgw_ = nullptr;
  return temp;
}
inline ::CheckGateway* UploadToGateway::_internal_mutable_checkgw() {
  _has_bits_[0] |= 0x00000008u;
  if (checkgw_ == nullptr) {
    auto* p = CreateMaybeMessage<::CheckGateway>(GetArenaNoVirtual());
    checkgw_ = p;
  }
  return checkgw_;
}
inline ::CheckGateway* UploadToGateway::mutable_checkgw() {
  // @@protoc_insertion_point(field_mutable:UploadToGateway.checkGw)
  return _internal_mutable_checkgw();
}
inline void UploadToGateway::set_allocated_checkgw(::CheckGateway* checkgw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete checkgw_;
  }
  if (checkgw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      checkgw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkgw, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  checkgw_ = checkgw;
  // @@protoc_insertion_point(field_set_allocated:UploadToGateway.checkGw)
}

// optional .EquipmentStatus eqpStatus = 5;
inline bool UploadToGateway::_internal_has_eqpstatus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || eqpstatus_ != nullptr);
  return value;
}
inline bool UploadToGateway::has_eqpstatus() const {
  return _internal_has_eqpstatus();
}
inline void UploadToGateway::clear_eqpstatus() {
  if (eqpstatus_ != nullptr) eqpstatus_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::EquipmentStatus& UploadToGateway::_internal_eqpstatus() const {
  const ::EquipmentStatus* p = eqpstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EquipmentStatus*>(
      &::_EquipmentStatus_default_instance_);
}
inline const ::EquipmentStatus& UploadToGateway::eqpstatus() const {
  // @@protoc_insertion_point(field_get:UploadToGateway.eqpStatus)
  return _internal_eqpstatus();
}
inline ::EquipmentStatus* UploadToGateway::release_eqpstatus() {
  // @@protoc_insertion_point(field_release:UploadToGateway.eqpStatus)
  _has_bits_[0] &= ~0x00000010u;
  ::EquipmentStatus* temp = eqpstatus_;
  eqpstatus_ = nullptr;
  return temp;
}
inline ::EquipmentStatus* UploadToGateway::_internal_mutable_eqpstatus() {
  _has_bits_[0] |= 0x00000010u;
  if (eqpstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::EquipmentStatus>(GetArenaNoVirtual());
    eqpstatus_ = p;
  }
  return eqpstatus_;
}
inline ::EquipmentStatus* UploadToGateway::mutable_eqpstatus() {
  // @@protoc_insertion_point(field_mutable:UploadToGateway.eqpStatus)
  return _internal_mutable_eqpstatus();
}
inline void UploadToGateway::set_allocated_eqpstatus(::EquipmentStatus* eqpstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete eqpstatus_;
  }
  if (eqpstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eqpstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eqpstatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  eqpstatus_ = eqpstatus;
  // @@protoc_insertion_point(field_set_allocated:UploadToGateway.eqpStatus)
}

// -------------------------------------------------------------------

// CheckGateway

// required bool isAlive = 1;
inline bool CheckGateway::_internal_has_isalive() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CheckGateway::has_isalive() const {
  return _internal_has_isalive();
}
inline void CheckGateway::clear_isalive() {
  isalive_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CheckGateway::_internal_isalive() const {
  return isalive_;
}
inline bool CheckGateway::isalive() const {
  // @@protoc_insertion_point(field_get:CheckGateway.isAlive)
  return _internal_isalive();
}
inline void CheckGateway::_internal_set_isalive(bool value) {
  _has_bits_[0] |= 0x00000001u;
  isalive_ = value;
}
inline void CheckGateway::set_isalive(bool value) {
  _internal_set_isalive(value);
  // @@protoc_insertion_point(field_set:CheckGateway.isAlive)
}

// -------------------------------------------------------------------

// UploadToServer

// required .HeaderMessage header = 1;
inline bool UploadToServer::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool UploadToServer::has_header() const {
  return _internal_has_header();
}
inline const ::HeaderMessage& UploadToServer::_internal_header() const {
  const ::HeaderMessage* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HeaderMessage*>(
      &::_HeaderMessage_default_instance_);
}
inline const ::HeaderMessage& UploadToServer::header() const {
  // @@protoc_insertion_point(field_get:UploadToServer.header)
  return _internal_header();
}
inline ::HeaderMessage* UploadToServer::release_header() {
  // @@protoc_insertion_point(field_release:UploadToServer.header)
  _has_bits_[0] &= ~0x00000001u;
  ::HeaderMessage* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::HeaderMessage* UploadToServer::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::HeaderMessage>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::HeaderMessage* UploadToServer::mutable_header() {
  // @@protoc_insertion_point(field_mutable:UploadToServer.header)
  return _internal_mutable_header();
}
inline void UploadToServer::set_allocated_header(::HeaderMessage* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:UploadToServer.header)
}

// optional .GatewayStatus gwStatus = 2;
inline bool UploadToServer::_internal_has_gwstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gwstatus_ != nullptr);
  return value;
}
inline bool UploadToServer::has_gwstatus() const {
  return _internal_has_gwstatus();
}
inline void UploadToServer::clear_gwstatus() {
  if (gwstatus_ != nullptr) gwstatus_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GatewayStatus& UploadToServer::_internal_gwstatus() const {
  const ::GatewayStatus* p = gwstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayStatus*>(
      &::_GatewayStatus_default_instance_);
}
inline const ::GatewayStatus& UploadToServer::gwstatus() const {
  // @@protoc_insertion_point(field_get:UploadToServer.gwStatus)
  return _internal_gwstatus();
}
inline ::GatewayStatus* UploadToServer::release_gwstatus() {
  // @@protoc_insertion_point(field_release:UploadToServer.gwStatus)
  _has_bits_[0] &= ~0x00000002u;
  ::GatewayStatus* temp = gwstatus_;
  gwstatus_ = nullptr;
  return temp;
}
inline ::GatewayStatus* UploadToServer::_internal_mutable_gwstatus() {
  _has_bits_[0] |= 0x00000002u;
  if (gwstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayStatus>(GetArenaNoVirtual());
    gwstatus_ = p;
  }
  return gwstatus_;
}
inline ::GatewayStatus* UploadToServer::mutable_gwstatus() {
  // @@protoc_insertion_point(field_mutable:UploadToServer.gwStatus)
  return _internal_mutable_gwstatus();
}
inline void UploadToServer::set_allocated_gwstatus(::GatewayStatus* gwstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gwstatus_;
  }
  if (gwstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gwstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gwstatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gwstatus_ = gwstatus;
  // @@protoc_insertion_point(field_set_allocated:UploadToServer.gwStatus)
}

// optional .EquipmentStatus eqpStatus = 3;
inline bool UploadToServer::_internal_has_eqpstatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || eqpstatus_ != nullptr);
  return value;
}
inline bool UploadToServer::has_eqpstatus() const {
  return _internal_has_eqpstatus();
}
inline void UploadToServer::clear_eqpstatus() {
  if (eqpstatus_ != nullptr) eqpstatus_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::EquipmentStatus& UploadToServer::_internal_eqpstatus() const {
  const ::EquipmentStatus* p = eqpstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EquipmentStatus*>(
      &::_EquipmentStatus_default_instance_);
}
inline const ::EquipmentStatus& UploadToServer::eqpstatus() const {
  // @@protoc_insertion_point(field_get:UploadToServer.eqpStatus)
  return _internal_eqpstatus();
}
inline ::EquipmentStatus* UploadToServer::release_eqpstatus() {
  // @@protoc_insertion_point(field_release:UploadToServer.eqpStatus)
  _has_bits_[0] &= ~0x00000004u;
  ::EquipmentStatus* temp = eqpstatus_;
  eqpstatus_ = nullptr;
  return temp;
}
inline ::EquipmentStatus* UploadToServer::_internal_mutable_eqpstatus() {
  _has_bits_[0] |= 0x00000004u;
  if (eqpstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::EquipmentStatus>(GetArenaNoVirtual());
    eqpstatus_ = p;
  }
  return eqpstatus_;
}
inline ::EquipmentStatus* UploadToServer::mutable_eqpstatus() {
  // @@protoc_insertion_point(field_mutable:UploadToServer.eqpStatus)
  return _internal_mutable_eqpstatus();
}
inline void UploadToServer::set_allocated_eqpstatus(::EquipmentStatus* eqpstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete eqpstatus_;
  }
  if (eqpstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eqpstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eqpstatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  eqpstatus_ = eqpstatus;
  // @@protoc_insertion_point(field_set_allocated:UploadToServer.eqpStatus)
}

// optional .ConfigGatewayResponse configGwResponse = 4;
inline bool UploadToServer::_internal_has_configgwresponse() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || configgwresponse_ != nullptr);
  return value;
}
inline bool UploadToServer::has_configgwresponse() const {
  return _internal_has_configgwresponse();
}
inline const ::ConfigGatewayResponse& UploadToServer::_internal_configgwresponse() const {
  const ::ConfigGatewayResponse* p = configgwresponse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConfigGatewayResponse*>(
      &::_ConfigGatewayResponse_default_instance_);
}
inline const ::ConfigGatewayResponse& UploadToServer::configgwresponse() const {
  // @@protoc_insertion_point(field_get:UploadToServer.configGwResponse)
  return _internal_configgwresponse();
}
inline ::ConfigGatewayResponse* UploadToServer::release_configgwresponse() {
  // @@protoc_insertion_point(field_release:UploadToServer.configGwResponse)
  _has_bits_[0] &= ~0x00000008u;
  ::ConfigGatewayResponse* temp = configgwresponse_;
  configgwresponse_ = nullptr;
  return temp;
}
inline ::ConfigGatewayResponse* UploadToServer::_internal_mutable_configgwresponse() {
  _has_bits_[0] |= 0x00000008u;
  if (configgwresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConfigGatewayResponse>(GetArenaNoVirtual());
    configgwresponse_ = p;
  }
  return configgwresponse_;
}
inline ::ConfigGatewayResponse* UploadToServer::mutable_configgwresponse() {
  // @@protoc_insertion_point(field_mutable:UploadToServer.configGwResponse)
  return _internal_mutable_configgwresponse();
}
inline void UploadToServer::set_allocated_configgwresponse(::ConfigGatewayResponse* configgwresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configgwresponse_);
  }
  if (configgwresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      configgwresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configgwresponse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  configgwresponse_ = configgwresponse;
  // @@protoc_insertion_point(field_set_allocated:UploadToServer.configGwResponse)
}

// optional .Commands cmd = 5;
inline bool UploadToServer::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cmd_ != nullptr);
  return value;
}
inline bool UploadToServer::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::Commands& UploadToServer::_internal_cmd() const {
  const ::Commands* p = cmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Commands*>(
      &::_Commands_default_instance_);
}
inline const ::Commands& UploadToServer::cmd() const {
  // @@protoc_insertion_point(field_get:UploadToServer.cmd)
  return _internal_cmd();
}
inline ::Commands* UploadToServer::release_cmd() {
  // @@protoc_insertion_point(field_release:UploadToServer.cmd)
  _has_bits_[0] &= ~0x00000010u;
  ::Commands* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::Commands* UploadToServer::_internal_mutable_cmd() {
  _has_bits_[0] |= 0x00000010u;
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::Commands>(GetArenaNoVirtual());
    cmd_ = p;
  }
  return cmd_;
}
inline ::Commands* UploadToServer::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:UploadToServer.cmd)
  return _internal_mutable_cmd();
}
inline void UploadToServer::set_allocated_cmd(::Commands* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:UploadToServer.cmd)
}

// -------------------------------------------------------------------

// NotificationValues

// repeated .ObjectValues alarmList = 1;
inline int NotificationValues::_internal_alarmlist_size() const {
  return alarmlist_.size();
}
inline int NotificationValues::alarmlist_size() const {
  return _internal_alarmlist_size();
}
inline ::ObjectValues* NotificationValues::mutable_alarmlist(int index) {
  // @@protoc_insertion_point(field_mutable:NotificationValues.alarmList)
  return alarmlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
NotificationValues::mutable_alarmlist() {
  // @@protoc_insertion_point(field_mutable_list:NotificationValues.alarmList)
  return &alarmlist_;
}
inline const ::ObjectValues& NotificationValues::_internal_alarmlist(int index) const {
  return alarmlist_.Get(index);
}
inline const ::ObjectValues& NotificationValues::alarmlist(int index) const {
  // @@protoc_insertion_point(field_get:NotificationValues.alarmList)
  return _internal_alarmlist(index);
}
inline ::ObjectValues* NotificationValues::_internal_add_alarmlist() {
  return alarmlist_.Add();
}
inline ::ObjectValues* NotificationValues::add_alarmlist() {
  // @@protoc_insertion_point(field_add:NotificationValues.alarmList)
  return _internal_add_alarmlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
NotificationValues::alarmlist() const {
  // @@protoc_insertion_point(field_list:NotificationValues.alarmList)
  return alarmlist_;
}

// repeated .ObjectValues staticList = 2;
inline int NotificationValues::_internal_staticlist_size() const {
  return staticlist_.size();
}
inline int NotificationValues::staticlist_size() const {
  return _internal_staticlist_size();
}
inline ::ObjectValues* NotificationValues::mutable_staticlist(int index) {
  // @@protoc_insertion_point(field_mutable:NotificationValues.staticList)
  return staticlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
NotificationValues::mutable_staticlist() {
  // @@protoc_insertion_point(field_mutable_list:NotificationValues.staticList)
  return &staticlist_;
}
inline const ::ObjectValues& NotificationValues::_internal_staticlist(int index) const {
  return staticlist_.Get(index);
}
inline const ::ObjectValues& NotificationValues::staticlist(int index) const {
  // @@protoc_insertion_point(field_get:NotificationValues.staticList)
  return _internal_staticlist(index);
}
inline ::ObjectValues* NotificationValues::_internal_add_staticlist() {
  return staticlist_.Add();
}
inline ::ObjectValues* NotificationValues::add_staticlist() {
  // @@protoc_insertion_point(field_add:NotificationValues.staticList)
  return _internal_add_staticlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
NotificationValues::staticlist() const {
  // @@protoc_insertion_point(field_list:NotificationValues.staticList)
  return staticlist_;
}

// -------------------------------------------------------------------

// NotificationToServer

// required .HeaderMessage header = 1;
inline bool NotificationToServer::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool NotificationToServer::has_header() const {
  return _internal_has_header();
}
inline const ::HeaderMessage& NotificationToServer::_internal_header() const {
  const ::HeaderMessage* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HeaderMessage*>(
      &::_HeaderMessage_default_instance_);
}
inline const ::HeaderMessage& NotificationToServer::header() const {
  // @@protoc_insertion_point(field_get:NotificationToServer.header)
  return _internal_header();
}
inline ::HeaderMessage* NotificationToServer::release_header() {
  // @@protoc_insertion_point(field_release:NotificationToServer.header)
  _has_bits_[0] &= ~0x00000001u;
  ::HeaderMessage* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::HeaderMessage* NotificationToServer::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::HeaderMessage>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::HeaderMessage* NotificationToServer::mutable_header() {
  // @@protoc_insertion_point(field_mutable:NotificationToServer.header)
  return _internal_mutable_header();
}
inline void NotificationToServer::set_allocated_header(::HeaderMessage* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:NotificationToServer.header)
}

// optional .EquipmentStatus eqpStatus = 2;
inline bool NotificationToServer::_internal_has_eqpstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || eqpstatus_ != nullptr);
  return value;
}
inline bool NotificationToServer::has_eqpstatus() const {
  return _internal_has_eqpstatus();
}
inline void NotificationToServer::clear_eqpstatus() {
  if (eqpstatus_ != nullptr) eqpstatus_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::EquipmentStatus& NotificationToServer::_internal_eqpstatus() const {
  const ::EquipmentStatus* p = eqpstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EquipmentStatus*>(
      &::_EquipmentStatus_default_instance_);
}
inline const ::EquipmentStatus& NotificationToServer::eqpstatus() const {
  // @@protoc_insertion_point(field_get:NotificationToServer.eqpStatus)
  return _internal_eqpstatus();
}
inline ::EquipmentStatus* NotificationToServer::release_eqpstatus() {
  // @@protoc_insertion_point(field_release:NotificationToServer.eqpStatus)
  _has_bits_[0] &= ~0x00000002u;
  ::EquipmentStatus* temp = eqpstatus_;
  eqpstatus_ = nullptr;
  return temp;
}
inline ::EquipmentStatus* NotificationToServer::_internal_mutable_eqpstatus() {
  _has_bits_[0] |= 0x00000002u;
  if (eqpstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::EquipmentStatus>(GetArenaNoVirtual());
    eqpstatus_ = p;
  }
  return eqpstatus_;
}
inline ::EquipmentStatus* NotificationToServer::mutable_eqpstatus() {
  // @@protoc_insertion_point(field_mutable:NotificationToServer.eqpStatus)
  return _internal_mutable_eqpstatus();
}
inline void NotificationToServer::set_allocated_eqpstatus(::EquipmentStatus* eqpstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete eqpstatus_;
  }
  if (eqpstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eqpstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eqpstatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  eqpstatus_ = eqpstatus;
  // @@protoc_insertion_point(field_set_allocated:NotificationToServer.eqpStatus)
}

// optional .GatewayStatus gwStatus = 3;
inline bool NotificationToServer::_internal_has_gwstatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || gwstatus_ != nullptr);
  return value;
}
inline bool NotificationToServer::has_gwstatus() const {
  return _internal_has_gwstatus();
}
inline void NotificationToServer::clear_gwstatus() {
  if (gwstatus_ != nullptr) gwstatus_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::GatewayStatus& NotificationToServer::_internal_gwstatus() const {
  const ::GatewayStatus* p = gwstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GatewayStatus*>(
      &::_GatewayStatus_default_instance_);
}
inline const ::GatewayStatus& NotificationToServer::gwstatus() const {
  // @@protoc_insertion_point(field_get:NotificationToServer.gwStatus)
  return _internal_gwstatus();
}
inline ::GatewayStatus* NotificationToServer::release_gwstatus() {
  // @@protoc_insertion_point(field_release:NotificationToServer.gwStatus)
  _has_bits_[0] &= ~0x00000004u;
  ::GatewayStatus* temp = gwstatus_;
  gwstatus_ = nullptr;
  return temp;
}
inline ::GatewayStatus* NotificationToServer::_internal_mutable_gwstatus() {
  _has_bits_[0] |= 0x00000004u;
  if (gwstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::GatewayStatus>(GetArenaNoVirtual());
    gwstatus_ = p;
  }
  return gwstatus_;
}
inline ::GatewayStatus* NotificationToServer::mutable_gwstatus() {
  // @@protoc_insertion_point(field_mutable:NotificationToServer.gwStatus)
  return _internal_mutable_gwstatus();
}
inline void NotificationToServer::set_allocated_gwstatus(::GatewayStatus* gwstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gwstatus_;
  }
  if (gwstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gwstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gwstatus, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gwstatus_ = gwstatus;
  // @@protoc_insertion_point(field_set_allocated:NotificationToServer.gwStatus)
}

// optional .NotificationValues notificationval = 4;
inline bool NotificationToServer::_internal_has_notificationval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || notificationval_ != nullptr);
  return value;
}
inline bool NotificationToServer::has_notificationval() const {
  return _internal_has_notificationval();
}
inline void NotificationToServer::clear_notificationval() {
  if (notificationval_ != nullptr) notificationval_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::NotificationValues& NotificationToServer::_internal_notificationval() const {
  const ::NotificationValues* p = notificationval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NotificationValues*>(
      &::_NotificationValues_default_instance_);
}
inline const ::NotificationValues& NotificationToServer::notificationval() const {
  // @@protoc_insertion_point(field_get:NotificationToServer.notificationval)
  return _internal_notificationval();
}
inline ::NotificationValues* NotificationToServer::release_notificationval() {
  // @@protoc_insertion_point(field_release:NotificationToServer.notificationval)
  _has_bits_[0] &= ~0x00000008u;
  ::NotificationValues* temp = notificationval_;
  notificationval_ = nullptr;
  return temp;
}
inline ::NotificationValues* NotificationToServer::_internal_mutable_notificationval() {
  _has_bits_[0] |= 0x00000008u;
  if (notificationval_ == nullptr) {
    auto* p = CreateMaybeMessage<::NotificationValues>(GetArenaNoVirtual());
    notificationval_ = p;
  }
  return notificationval_;
}
inline ::NotificationValues* NotificationToServer::mutable_notificationval() {
  // @@protoc_insertion_point(field_mutable:NotificationToServer.notificationval)
  return _internal_mutable_notificationval();
}
inline void NotificationToServer::set_allocated_notificationval(::NotificationValues* notificationval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notificationval_;
  }
  if (notificationval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notificationval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notificationval, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  notificationval_ = notificationval;
  // @@protoc_insertion_point(field_set_allocated:NotificationToServer.notificationval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
