// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: objects.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_objects_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_objects_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_objects_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_objects_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_objects_2eproto;
class ObjectValues;
class ObjectValuesDefaultTypeInternal;
extern ObjectValuesDefaultTypeInternal _ObjectValues_default_instance_;
class ValObj;
class ValObjDefaultTypeInternal;
extern ValObjDefaultTypeInternal _ValObj_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ObjectValues* Arena::CreateMaybeMessage<::ObjectValues>(Arena*);
template<> ::ValObj* Arena::CreateMaybeMessage<::ValObj>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ObjType : int {
  OBJ_TYPE_NONE = 0,
  RESERVED_1 = 1,
  RESERVED_2 = 2,
  RESERVED_3 = 3,
  OBJ_TYPE_BINARY_INPUT = 4,
  OBJ_TYPE_BINARY_OUTPUT = 5,
  OBJ_TYPE_BINARY_COUNTER = 6,
  OBJ_TYPE_ANALOG_INPUT = 7,
  OBJ_TYPE_ANALOG_OUTPUT = 8,
  OBJ_TYPE_FILE = 9
};
bool ObjType_IsValid(int value);
constexpr ObjType ObjType_MIN = OBJ_TYPE_NONE;
constexpr ObjType ObjType_MAX = OBJ_TYPE_FILE;
constexpr int ObjType_ARRAYSIZE = ObjType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjType_descriptor();
template<typename T>
inline const std::string& ObjType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjType_descriptor(), enum_t_value);
}
inline bool ObjType_Parse(
    const std::string& name, ObjType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjType>(
    ObjType_descriptor(), name, value);
}
// ===================================================================

class ValObj :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValObj) */ {
 public:
  ValObj();
  virtual ~ValObj();

  ValObj(const ValObj& from);
  ValObj(ValObj&& from) noexcept
    : ValObj() {
    *this = ::std::move(from);
  }

  inline ValObj& operator=(const ValObj& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValObj& operator=(ValObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValObj* internal_default_instance() {
    return reinterpret_cast<const ValObj*>(
               &_ValObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValObj& a, ValObj& b) {
    a.Swap(&b);
  }
  inline void Swap(ValObj* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValObj* New() const final {
    return CreateMaybeMessage<ValObj>(nullptr);
  }

  ValObj* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValObj>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValObj& from);
  void MergeFrom(const ValObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValObj* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValObj";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2eproto);
    return ::descriptor_table_objects_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kIValueFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kFValueFieldNumber = 3,
    kOnlineFieldNumber = 5,
  };
  // optional uint32 point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 iValue = 2;
  bool has_ivalue() const;
  private:
  bool _internal_has_ivalue() const;
  public:
  void clear_ivalue();
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue() const;
  void set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ivalue() const;
  void _internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float fValue = 3;
  bool has_fvalue() const;
  private:
  bool _internal_has_fvalue() const;
  public:
  void clear_fvalue();
  float fvalue() const;
  void set_fvalue(float value);
  private:
  float _internal_fvalue() const;
  void _internal_set_fvalue(float value);
  public:

  // optional bool online = 5;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ValObj)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_;
  ::PROTOBUF_NAMESPACE_ID::int32 ivalue_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  float fvalue_;
  bool online_;
  friend struct ::TableStruct_objects_2eproto;
};
// -------------------------------------------------------------------

class ObjectValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectValues) */ {
 public:
  ObjectValues();
  virtual ~ObjectValues();

  ObjectValues(const ObjectValues& from);
  ObjectValues(ObjectValues&& from) noexcept
    : ObjectValues() {
    *this = ::std::move(from);
  }

  inline ObjectValues& operator=(const ObjectValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectValues& operator=(ObjectValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectValues* internal_default_instance() {
    return reinterpret_cast<const ObjectValues*>(
               &_ObjectValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectValues& a, ObjectValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectValues* New() const final {
    return CreateMaybeMessage<ObjectValues>(nullptr);
  }

  ObjectValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectValues& from);
  void MergeFrom(const ObjectValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_objects_2eproto);
    return ::descriptor_table_objects_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjValuesFieldNumber = 2,
    kObjTypeFieldNumber = 1,
  };
  // repeated .ValObj objValues = 2;
  int objvalues_size() const;
  private:
  int _internal_objvalues_size() const;
  public:
  void clear_objvalues();
  ::ValObj* mutable_objvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValObj >*
      mutable_objvalues();
  private:
  const ::ValObj& _internal_objvalues(int index) const;
  ::ValObj* _internal_add_objvalues();
  public:
  const ::ValObj& objvalues(int index) const;
  ::ValObj* add_objvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValObj >&
      objvalues() const;

  // optional .ObjType objType = 1;
  bool has_objtype() const;
  private:
  bool _internal_has_objtype() const;
  public:
  void clear_objtype();
  ::ObjType objtype() const;
  void set_objtype(::ObjType value);
  private:
  ::ObjType _internal_objtype() const;
  void _internal_set_objtype(::ObjType value);
  public:

  // @@protoc_insertion_point(class_scope:ObjectValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValObj > objvalues_;
  int objtype_;
  friend struct ::TableStruct_objects_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValObj

// optional uint32 point = 1;
inline bool ValObj::_internal_has_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ValObj::has_point() const {
  return _internal_has_point();
}
inline void ValObj::clear_point() {
  point_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValObj::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ValObj::point() const {
  // @@protoc_insertion_point(field_get:ValObj.point)
  return _internal_point();
}
inline void ValObj::_internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  point_ = value;
}
inline void ValObj::set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:ValObj.point)
}

// optional int32 iValue = 2;
inline bool ValObj::_internal_has_ivalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ValObj::has_ivalue() const {
  return _internal_has_ivalue();
}
inline void ValObj::clear_ivalue() {
  ivalue_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValObj::_internal_ivalue() const {
  return ivalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValObj::ivalue() const {
  // @@protoc_insertion_point(field_get:ValObj.iValue)
  return _internal_ivalue();
}
inline void ValObj::_internal_set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ivalue_ = value;
}
inline void ValObj::set_ivalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ivalue(value);
  // @@protoc_insertion_point(field_set:ValObj.iValue)
}

// optional float fValue = 3;
inline bool ValObj::_internal_has_fvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ValObj::has_fvalue() const {
  return _internal_has_fvalue();
}
inline void ValObj::clear_fvalue() {
  fvalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ValObj::_internal_fvalue() const {
  return fvalue_;
}
inline float ValObj::fvalue() const {
  // @@protoc_insertion_point(field_get:ValObj.fValue)
  return _internal_fvalue();
}
inline void ValObj::_internal_set_fvalue(float value) {
  _has_bits_[0] |= 0x00000008u;
  fvalue_ = value;
}
inline void ValObj::set_fvalue(float value) {
  _internal_set_fvalue(value);
  // @@protoc_insertion_point(field_set:ValObj.fValue)
}

// optional int64 timestamp = 4;
inline bool ValObj::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ValObj::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ValObj::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValObj::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValObj::timestamp() const {
  // @@protoc_insertion_point(field_get:ValObj.timestamp)
  return _internal_timestamp();
}
inline void ValObj::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void ValObj::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ValObj.timestamp)
}

// optional bool online = 5;
inline bool ValObj::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ValObj::has_online() const {
  return _internal_has_online();
}
inline void ValObj::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ValObj::_internal_online() const {
  return online_;
}
inline bool ValObj::online() const {
  // @@protoc_insertion_point(field_get:ValObj.online)
  return _internal_online();
}
inline void ValObj::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000010u;
  online_ = value;
}
inline void ValObj::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:ValObj.online)
}

// -------------------------------------------------------------------

// ObjectValues

// optional .ObjType objType = 1;
inline bool ObjectValues::_internal_has_objtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectValues::has_objtype() const {
  return _internal_has_objtype();
}
inline void ObjectValues::clear_objtype() {
  objtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ObjType ObjectValues::_internal_objtype() const {
  return static_cast< ::ObjType >(objtype_);
}
inline ::ObjType ObjectValues::objtype() const {
  // @@protoc_insertion_point(field_get:ObjectValues.objType)
  return _internal_objtype();
}
inline void ObjectValues::_internal_set_objtype(::ObjType value) {
  assert(::ObjType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  objtype_ = value;
}
inline void ObjectValues::set_objtype(::ObjType value) {
  _internal_set_objtype(value);
  // @@protoc_insertion_point(field_set:ObjectValues.objType)
}

// repeated .ValObj objValues = 2;
inline int ObjectValues::_internal_objvalues_size() const {
  return objvalues_.size();
}
inline int ObjectValues::objvalues_size() const {
  return _internal_objvalues_size();
}
inline void ObjectValues::clear_objvalues() {
  objvalues_.Clear();
}
inline ::ValObj* ObjectValues::mutable_objvalues(int index) {
  // @@protoc_insertion_point(field_mutable:ObjectValues.objValues)
  return objvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValObj >*
ObjectValues::mutable_objvalues() {
  // @@protoc_insertion_point(field_mutable_list:ObjectValues.objValues)
  return &objvalues_;
}
inline const ::ValObj& ObjectValues::_internal_objvalues(int index) const {
  return objvalues_.Get(index);
}
inline const ::ValObj& ObjectValues::objvalues(int index) const {
  // @@protoc_insertion_point(field_get:ObjectValues.objValues)
  return _internal_objvalues(index);
}
inline ::ValObj* ObjectValues::_internal_add_objvalues() {
  return objvalues_.Add();
}
inline ::ValObj* ObjectValues::add_objvalues() {
  // @@protoc_insertion_point(field_add:ObjectValues.objValues)
  return _internal_add_objvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValObj >&
ObjectValues::objvalues() const {
  // @@protoc_insertion_point(field_list:ObjectValues.objValues)
  return objvalues_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ObjType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ObjType>() {
  return ::ObjType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_objects_2eproto
