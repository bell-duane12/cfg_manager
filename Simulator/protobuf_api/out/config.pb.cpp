// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Device_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dnp3Parms_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipClass_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusParms_config_2eproto;
class Dnp3ParmsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dnp3Parms> _instance;
} _Dnp3Parms_default_instance_;
class ModbusParmsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusParms> _instance;
} _ModbusParms_default_instance_;
class EquipClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipClass> _instance;
} _EquipClass_default_instance_;
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class ConfigGatewayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigGateway> _instance;
} _ConfigGateway_default_instance_;
class ConfigGatewayResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigGatewayResponse> _instance;
} _ConfigGatewayResponse_default_instance_;
static void InitDefaultsscc_info_ConfigGateway_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigGateway_default_instance_;
    new (ptr) ::ConfigGateway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigGateway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConfigGateway_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConfigGateway_config_2eproto}, {
      &scc_info_Device_config_2eproto.base,}};

static void InitDefaultsscc_info_ConfigGatewayResponse_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConfigGatewayResponse_default_instance_;
    new (ptr) ::ConfigGatewayResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConfigGatewayResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfigGatewayResponse_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfigGatewayResponse_config_2eproto}, {}};

static void InitDefaultsscc_info_Device_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Device_default_instance_;
    new (ptr) ::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Device_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Device_config_2eproto}, {
      &scc_info_ModbusParms_config_2eproto.base,
      &scc_info_Dnp3Parms_config_2eproto.base,
      &scc_info_EquipClass_config_2eproto.base,}};

static void InitDefaultsscc_info_Dnp3Parms_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Dnp3Parms_default_instance_;
    new (ptr) ::Dnp3Parms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Dnp3Parms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dnp3Parms_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dnp3Parms_config_2eproto}, {}};

static void InitDefaultsscc_info_EquipClass_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EquipClass_default_instance_;
    new (ptr) ::EquipClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EquipClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipClass_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipClass_config_2eproto}, {}};

static void InitDefaultsscc_info_ModbusParms_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModbusParms_default_instance_;
    new (ptr) ::ModbusParms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ModbusParms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusParms_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModbusParms_config_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, outstation_id_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, ip1_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, ip2_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, ip3_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, port1_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, port2_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, port3_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, uns_conn_token_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, uns_addr_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, master_id1_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, master_id2_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, master_id3_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, analog_out_point_offset_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, binary_in_confirm_cmd_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, failure_point_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, dnp3_failure_point_val_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, check_failure_),
  PROTOBUF_FIELD_OFFSET(::Dnp3Parms, dnp3_failure_point_type_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::ModbusParms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ModbusParms, mode_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, ip_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, port_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, baud_rate_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, num_devs_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, addr_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, device_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, address_list_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, timeout_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, inter_polling_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, intra_polling_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, retry_timeout_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, retries_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, poll_trigger_),
  PROTOBUF_FIELD_OFFSET(::ModbusParms, trigger_path_),
  14,
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  8,
  9,
  10,
  11,
  12,
  13,
  4,
  PROTOBUF_FIELD_OFFSET(::EquipClass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EquipClass, classid_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, typeid__),
  PROTOBUF_FIELD_OFFSET(::EquipClass, mapid_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, name_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, version_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, classmap_description_),
  PROTOBUF_FIELD_OFFSET(::EquipClass, classmap_path_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Device, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Device, name_),
  PROTOBUF_FIELD_OFFSET(::Device, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::Device, model_),
  PROTOBUF_FIELD_OFFSET(::Device, class_id_),
  PROTOBUF_FIELD_OFFSET(::Device, ug_),
  PROTOBUF_FIELD_OFFSET(::Device, modbus_cfg_),
  PROTOBUF_FIELD_OFFSET(::Device, dnp3_cfg_),
  PROTOBUF_FIELD_OFFSET(::Device, classmap_),
  0,
  1,
  2,
  6,
  7,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ConfigGateway, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConfigGateway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigGateway, devices_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ConfigGatewayResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ConfigGatewayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConfigGatewayResponse, numdevicescfg_),
  PROTOBUF_FIELD_OFFSET(::ConfigGatewayResponse, success_),
  PROTOBUF_FIELD_OFFSET(::ConfigGatewayResponse, errmsg_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::Dnp3Parms)},
  { 41, 61, sizeof(::ModbusParms)},
  { 76, 88, sizeof(::EquipClass)},
  { 95, 108, sizeof(::Device)},
  { 116, 122, sizeof(::ConfigGateway)},
  { 123, 131, sizeof(::ConfigGatewayResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dnp3Parms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModbusParms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EquipClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigGateway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConfigGatewayResponse_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\"\236\003\n\tDnp3Parms\022\025\n\routstati"
  "on_id\030\001 \002(\r\022\013\n\003ip1\030\002 \002(\t\022\013\n\003ip2\030\003 \002(\t\022\013\n"
  "\003ip3\030\004 \002(\t\022\r\n\005port1\030\005 \002(\r\022\r\n\005port2\030\006 \002(\r"
  "\022\r\n\005port3\030\007 \002(\r\022\026\n\016uns_conn_token\030\010 \002(\r\022"
  "\020\n\010uns_addr\030\t \002(\r\022\022\n\nmaster_id1\030\n \002(\r\022\022\n"
  "\nmaster_id2\030\013 \002(\r\022\022\n\nmaster_id3\030\014 \002(\r\022\037\n"
  "\027analog_out_point_offset\030\r \002(\r\022\035\n\025binary"
  "_in_confirm_cmd\030\016 \002(\r\022\025\n\rfailure_point\030\017"
  " \002(\r\022\036\n\026dnp3_failure_point_val\030\020 \002(\005\022\025\n\r"
  "check_failure\030\021 \002(\010\0222\n\027dnp3_failure_poin"
  "t_type\030\022 \002(\0162\021.TDnp3ObjectType_\"\264\002\n\013Modb"
  "usParms\022\037\n\004mode\030\001 \002(\0162\021.TModbusTypeConn_"
  "\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\022\021\n\tbaud_rate\030"
  "\004 \002(\t\022\020\n\010num_devs\030\005 \002(\r\022\014\n\004addr\030\006 \002(\r\022\016\n"
  "\006device\030\007 \002(\t\022\024\n\014address_list\030\010 \002(\t\022\017\n\007t"
  "imeout\030\t \002(\r\022\025\n\rinter_polling\030\n \002(\r\022\025\n\ri"
  "ntra_polling\030\013 \002(\r\022\025\n\rretry_timeout\030\014 \002("
  "\r\022\017\n\007retries\030\r \002(\r\022\024\n\014poll_trigger\030\016 \002(\r"
  "\022\024\n\014trigger_path\030\017 \002(\t\"\220\001\n\nEquipClass\022\017\n"
  "\007classId\030\001 \002(\r\022\016\n\006typeId\030\002 \002(\r\022\r\n\005mapId\030"
  "\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\017\n\007version\030\005 \002(\t\022\034\n\024"
  "classmap_description\030\006 \002(\t\022\025\n\rclassmap_p"
  "ath\030\007 \002(\t\"\270\001\n\006Device\022\014\n\004name\030\001 \002(\t\022\024\n\014ma"
  "nufacturer\030\002 \002(\t\022\r\n\005model\030\003 \002(\t\022\020\n\010class"
  "_id\030\004 \002(\r\022\n\n\002ug\030\005 \002(\r\022 \n\nmodbus_cfg\030\006 \002("
  "\0132\014.ModbusParms\022\034\n\010dnp3_cfg\030\007 \002(\0132\n.Dnp3"
  "Parms\022\035\n\010classmap\030\010 \002(\0132\013.EquipClass\")\n\r"
  "ConfigGateway\022\030\n\007devices\030\001 \003(\0132\007.Device\""
  "O\n\025ConfigGatewayResponse\022\025\n\rnumDevicesCf"
  "g\030\001 \002(\r\022\017\n\007success\030\002 \002(\010\022\016\n\006errMsg\030\003 \001(\t"
  "*|\n\020TDnp3ObjectType_\022\017\n\013OBJ_BINARY_\020\001\022\020\n"
  "\014OBJ_COUNTER_\020\002\022\017\n\013OBJ_ANALOG_\020\003\022\020\n\014OBJ_"
  "COMMAND_\020\004\022\023\n\017OBJ_REGULATION_\020\005\022\r\n\tOBJ_N"
  "ONE_\020\006*4\n\020TModbusTypeConn_\022\010\n\004TCP_\020\001\022\010\n\004"
  "RTU_\020\002\022\014\n\010RTU_TCP_\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_2eproto_sccs[6] = {
  &scc_info_ConfigGateway_config_2eproto.base,
  &scc_info_ConfigGatewayResponse_config_2eproto.base,
  &scc_info_Device_config_2eproto.base,
  &scc_info_Dnp3Parms_config_2eproto.base,
  &scc_info_EquipClass_config_2eproto.base,
  &scc_info_ModbusParms_config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
static bool descriptor_table_config_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  &descriptor_table_config_2eproto_initialized, descriptor_table_protodef_config_2eproto, "config.proto", 1380,
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_sccs, descriptor_table_config_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, 6, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDnp3ObjectType__descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool TDnp3ObjectType__IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TModbusTypeConn__descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[1];
}
bool TModbusTypeConn__IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Dnp3Parms::InitAsDefaultInstance() {
}
class Dnp3Parms::_Internal {
 public:
  using HasBits = decltype(std::declval<Dnp3Parms>()._has_bits_);
  static void set_has_outstation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ip1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_port2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_port3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uns_conn_token(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uns_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_master_id1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_master_id2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_master_id3(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_analog_out_point_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_binary_in_confirm_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_failure_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dnp3_failure_point_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_check_failure(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_dnp3_failure_point_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

Dnp3Parms::Dnp3Parms()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Dnp3Parms)
}
Dnp3Parms::Dnp3Parms(const Dnp3Parms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip1()) {
    ip1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip1_);
  }
  ip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip2()) {
    ip2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip2_);
  }
  ip3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip3()) {
    ip3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip3_);
  }
  ::memcpy(&outstation_id_, &from.outstation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dnp3_failure_point_type_) -
    reinterpret_cast<char*>(&outstation_id_)) + sizeof(dnp3_failure_point_type_));
  // @@protoc_insertion_point(copy_constructor:Dnp3Parms)
}

void Dnp3Parms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dnp3Parms_config_2eproto.base);
  ip1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outstation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_failure_) -
      reinterpret_cast<char*>(&outstation_id_)) + sizeof(check_failure_));
  dnp3_failure_point_type_ = 1;
}

Dnp3Parms::~Dnp3Parms() {
  // @@protoc_insertion_point(destructor:Dnp3Parms)
  SharedDtor();
}

void Dnp3Parms::SharedDtor() {
  ip1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dnp3Parms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dnp3Parms& Dnp3Parms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dnp3Parms_config_2eproto.base);
  return *internal_default_instance();
}


void Dnp3Parms::Clear() {
// @@protoc_insertion_point(message_clear_start:Dnp3Parms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ip1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ip3_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&outstation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uns_conn_token_) -
        reinterpret_cast<char*>(&outstation_id_)) + sizeof(uns_conn_token_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&uns_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dnp3_failure_point_val_) -
        reinterpret_cast<char*>(&uns_addr_)) + sizeof(dnp3_failure_point_val_));
  }
  if (cached_has_bits & 0x00030000u) {
    check_failure_ = false;
    dnp3_failure_point_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dnp3Parms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 outstation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_outstation_id(&has_bits);
          outstation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Dnp3Parms.ip1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Dnp3Parms.ip2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ip3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Dnp3Parms.ip3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_port1(&has_bits);
          port1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_port2(&has_bits);
          port2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_port3(&has_bits);
          port3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uns_conn_token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_uns_conn_token(&has_bits);
          uns_conn_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uns_addr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_uns_addr(&has_bits);
          uns_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 master_id1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_master_id1(&has_bits);
          master_id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 master_id2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_master_id2(&has_bits);
          master_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 master_id3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_master_id3(&has_bits);
          master_id3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 analog_out_point_offset = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_analog_out_point_offset(&has_bits);
          analog_out_point_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 binary_in_confirm_cmd = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_binary_in_confirm_cmd(&has_bits);
          binary_in_confirm_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 failure_point = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_failure_point(&has_bits);
          failure_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 dnp3_failure_point_val = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dnp3_failure_point_val(&has_bits);
          dnp3_failure_point_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool check_failure = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_check_failure(&has_bits);
          check_failure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TDnp3ObjectType_ dnp3_failure_point_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TDnp3ObjectType__IsValid(val))) {
            _internal_set_dnp3_failure_point_type(static_cast<::TDnp3ObjectType_>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dnp3Parms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dnp3Parms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 outstation_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_outstation_id(), target);
  }

  // required string ip1 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip1().data(), static_cast<int>(this->_internal_ip1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Dnp3Parms.ip1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip1(), target);
  }

  // required string ip2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip2().data(), static_cast<int>(this->_internal_ip2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Dnp3Parms.ip2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip2(), target);
  }

  // required string ip3 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip3().data(), static_cast<int>(this->_internal_ip3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Dnp3Parms.ip3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip3(), target);
  }

  // required uint32 port1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port1(), target);
  }

  // required uint32 port2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_port2(), target);
  }

  // required uint32 port3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_port3(), target);
  }

  // required uint32 uns_conn_token = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uns_conn_token(), target);
  }

  // required uint32 uns_addr = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_uns_addr(), target);
  }

  // required uint32 master_id1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_master_id1(), target);
  }

  // required uint32 master_id2 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_master_id2(), target);
  }

  // required uint32 master_id3 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_master_id3(), target);
  }

  // required uint32 analog_out_point_offset = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_analog_out_point_offset(), target);
  }

  // required uint32 binary_in_confirm_cmd = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_binary_in_confirm_cmd(), target);
  }

  // required uint32 failure_point = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_failure_point(), target);
  }

  // required int32 dnp3_failure_point_val = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_dnp3_failure_point_val(), target);
  }

  // required bool check_failure = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_check_failure(), target);
  }

  // required .TDnp3ObjectType_ dnp3_failure_point_type = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_dnp3_failure_point_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dnp3Parms)
  return target;
}

size_t Dnp3Parms::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Dnp3Parms)
  size_t total_size = 0;

  if (_internal_has_ip1()) {
    // required string ip1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip1());
  }

  if (_internal_has_ip2()) {
    // required string ip2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip2());
  }

  if (_internal_has_ip3()) {
    // required string ip3 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip3());
  }

  if (_internal_has_outstation_id()) {
    // required uint32 outstation_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outstation_id());
  }

  if (_internal_has_port1()) {
    // required uint32 port1 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port1());
  }

  if (_internal_has_port2()) {
    // required uint32 port2 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port2());
  }

  if (_internal_has_port3()) {
    // required uint32 port3 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port3());
  }

  if (_internal_has_uns_conn_token()) {
    // required uint32 uns_conn_token = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uns_conn_token());
  }

  if (_internal_has_uns_addr()) {
    // required uint32 uns_addr = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uns_addr());
  }

  if (_internal_has_master_id1()) {
    // required uint32 master_id1 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id1());
  }

  if (_internal_has_master_id2()) {
    // required uint32 master_id2 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id2());
  }

  if (_internal_has_master_id3()) {
    // required uint32 master_id3 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id3());
  }

  if (_internal_has_analog_out_point_offset()) {
    // required uint32 analog_out_point_offset = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_analog_out_point_offset());
  }

  if (_internal_has_binary_in_confirm_cmd()) {
    // required uint32 binary_in_confirm_cmd = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_binary_in_confirm_cmd());
  }

  if (_internal_has_failure_point()) {
    // required uint32 failure_point = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_failure_point());
  }

  if (_internal_has_dnp3_failure_point_val()) {
    // required int32 dnp3_failure_point_val = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dnp3_failure_point_val());
  }

  if (_internal_has_check_failure()) {
    // required bool check_failure = 17;
    total_size += 2 + 1;
  }

  if (_internal_has_dnp3_failure_point_type()) {
    // required .TDnp3ObjectType_ dnp3_failure_point_type = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dnp3_failure_point_type());
  }

  return total_size;
}
size_t Dnp3Parms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dnp3Parms)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required string ip1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip1());

    // required string ip2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip2());

    // required string ip3 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip3());

    // required uint32 outstation_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outstation_id());

    // required uint32 port1 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port1());

    // required uint32 port2 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port2());

    // required uint32 port3 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port3());

    // required uint32 uns_conn_token = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uns_conn_token());

    // required uint32 uns_addr = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uns_addr());

    // required uint32 master_id1 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id1());

    // required uint32 master_id2 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id2());

    // required uint32 master_id3 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_master_id3());

    // required uint32 analog_out_point_offset = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_analog_out_point_offset());

    // required uint32 binary_in_confirm_cmd = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_binary_in_confirm_cmd());

    // required uint32 failure_point = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_failure_point());

    // required int32 dnp3_failure_point_val = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dnp3_failure_point_val());

    // required bool check_failure = 17;
    total_size += 2 + 1;

    // required .TDnp3ObjectType_ dnp3_failure_point_type = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dnp3_failure_point_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dnp3Parms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Dnp3Parms)
  GOOGLE_DCHECK_NE(&from, this);
  const Dnp3Parms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dnp3Parms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Dnp3Parms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Dnp3Parms)
    MergeFrom(*source);
  }
}

void Dnp3Parms::MergeFrom(const Dnp3Parms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dnp3Parms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip2_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ip3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip3_);
    }
    if (cached_has_bits & 0x00000008u) {
      outstation_id_ = from.outstation_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      port1_ = from.port1_;
    }
    if (cached_has_bits & 0x00000020u) {
      port2_ = from.port2_;
    }
    if (cached_has_bits & 0x00000040u) {
      port3_ = from.port3_;
    }
    if (cached_has_bits & 0x00000080u) {
      uns_conn_token_ = from.uns_conn_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      uns_addr_ = from.uns_addr_;
    }
    if (cached_has_bits & 0x00000200u) {
      master_id1_ = from.master_id1_;
    }
    if (cached_has_bits & 0x00000400u) {
      master_id2_ = from.master_id2_;
    }
    if (cached_has_bits & 0x00000800u) {
      master_id3_ = from.master_id3_;
    }
    if (cached_has_bits & 0x00001000u) {
      analog_out_point_offset_ = from.analog_out_point_offset_;
    }
    if (cached_has_bits & 0x00002000u) {
      binary_in_confirm_cmd_ = from.binary_in_confirm_cmd_;
    }
    if (cached_has_bits & 0x00004000u) {
      failure_point_ = from.failure_point_;
    }
    if (cached_has_bits & 0x00008000u) {
      dnp3_failure_point_val_ = from.dnp3_failure_point_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      check_failure_ = from.check_failure_;
    }
    if (cached_has_bits & 0x00020000u) {
      dnp3_failure_point_type_ = from.dnp3_failure_point_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dnp3Parms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Dnp3Parms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dnp3Parms::CopyFrom(const Dnp3Parms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dnp3Parms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dnp3Parms::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  return true;
}

void Dnp3Parms::InternalSwap(Dnp3Parms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip1_.Swap(&other->ip1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip2_.Swap(&other->ip2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip3_.Swap(&other->ip3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outstation_id_, other->outstation_id_);
  swap(port1_, other->port1_);
  swap(port2_, other->port2_);
  swap(port3_, other->port3_);
  swap(uns_conn_token_, other->uns_conn_token_);
  swap(uns_addr_, other->uns_addr_);
  swap(master_id1_, other->master_id1_);
  swap(master_id2_, other->master_id2_);
  swap(master_id3_, other->master_id3_);
  swap(analog_out_point_offset_, other->analog_out_point_offset_);
  swap(binary_in_confirm_cmd_, other->binary_in_confirm_cmd_);
  swap(failure_point_, other->failure_point_);
  swap(dnp3_failure_point_val_, other->dnp3_failure_point_val_);
  swap(check_failure_, other->check_failure_);
  swap(dnp3_failure_point_type_, other->dnp3_failure_point_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dnp3Parms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusParms::InitAsDefaultInstance() {
}
class ModbusParms::_Internal {
 public:
  using HasBits = decltype(std::declval<ModbusParms>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_baud_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_devs(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_address_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_inter_polling(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_intra_polling(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_retry_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_poll_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trigger_path(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ModbusParms::ModbusParms()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ModbusParms)
}
ModbusParms::ModbusParms(const ModbusParms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  baud_rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_baud_rate()) {
    baud_rate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.baud_rate_);
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device()) {
    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  address_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address_list()) {
    address_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_list_);
  }
  trigger_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trigger_path()) {
    trigger_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_path_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&port_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:ModbusParms)
}

void ModbusParms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModbusParms_config_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baud_rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trigger_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poll_trigger_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poll_trigger_));
  mode_ = 1;
}

ModbusParms::~ModbusParms() {
  // @@protoc_insertion_point(destructor:ModbusParms)
  SharedDtor();
}

void ModbusParms::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baud_rate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trigger_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModbusParms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusParms& ModbusParms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusParms_config_2eproto.base);
  return *internal_default_instance();
}


void ModbusParms::Clear() {
// @@protoc_insertion_point(message_clear_start:ModbusParms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      baud_rate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      device_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      address_list_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      trigger_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&addr_) -
        reinterpret_cast<char*>(&port_)) + sizeof(addr_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poll_trigger_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(poll_trigger_));
    mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ModbusParms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .TModbusTypeConn_ mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TModbusTypeConn__IsValid(val))) {
            _internal_set_mode(static_cast<::TModbusTypeConn_>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusParms.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string baud_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_baud_rate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusParms.baud_rate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_devs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_devs(&has_bits);
          num_devs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string device = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusParms.device");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string address_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_address_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusParms.address_list");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 inter_polling = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_inter_polling(&has_bits);
          inter_polling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 intra_polling = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_intra_polling(&has_bits);
          intra_polling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 retry_timeout = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_retry_timeout(&has_bits);
          retry_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 retries = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_retries(&has_bits);
          retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 poll_trigger = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_poll_trigger(&has_bits);
          poll_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string trigger_path = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_trigger_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModbusParms.trigger_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusParms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModbusParms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TModbusTypeConn_ mode = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // required string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ModbusParms.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // required uint32 port = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // required string baud_rate = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_baud_rate().data(), static_cast<int>(this->_internal_baud_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ModbusParms.baud_rate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_baud_rate(), target);
  }

  // required uint32 num_devs = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_devs(), target);
  }

  // required uint32 addr = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_addr(), target);
  }

  // required string device = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ModbusParms.device");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device(), target);
  }

  // required string address_list = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address_list().data(), static_cast<int>(this->_internal_address_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ModbusParms.address_list");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_address_list(), target);
  }

  // required uint32 timeout = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timeout(), target);
  }

  // required uint32 inter_polling = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_inter_polling(), target);
  }

  // required uint32 intra_polling = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_intra_polling(), target);
  }

  // required uint32 retry_timeout = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_retry_timeout(), target);
  }

  // required uint32 retries = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_retries(), target);
  }

  // required uint32 poll_trigger = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_poll_trigger(), target);
  }

  // required string trigger_path = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trigger_path().data(), static_cast<int>(this->_internal_trigger_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ModbusParms.trigger_path");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_trigger_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModbusParms)
  return target;
}

size_t ModbusParms::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ModbusParms)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_baud_rate()) {
    // required string baud_rate = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baud_rate());
  }

  if (_internal_has_device()) {
    // required string device = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  if (_internal_has_address_list()) {
    // required string address_list = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address_list());
  }

  if (_internal_has_trigger_path()) {
    // required string trigger_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_path());
  }

  if (_internal_has_port()) {
    // required uint32 port = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (_internal_has_num_devs()) {
    // required uint32 num_devs = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_devs());
  }

  if (_internal_has_addr()) {
    // required uint32 addr = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addr());
  }

  if (_internal_has_timeout()) {
    // required uint32 timeout = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (_internal_has_inter_polling()) {
    // required uint32 inter_polling = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inter_polling());
  }

  if (_internal_has_intra_polling()) {
    // required uint32 intra_polling = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_intra_polling());
  }

  if (_internal_has_retry_timeout()) {
    // required uint32 retry_timeout = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retry_timeout());
  }

  if (_internal_has_retries()) {
    // required uint32 retries = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retries());
  }

  if (_internal_has_poll_trigger()) {
    // required uint32 poll_trigger = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poll_trigger());
  }

  if (_internal_has_mode()) {
    // required .TModbusTypeConn_ mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return total_size;
}
size_t ModbusParms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModbusParms)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required string baud_rate = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_baud_rate());

    // required string device = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());

    // required string address_list = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address_list());

    // required string trigger_path = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trigger_path());

    // required uint32 port = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());

    // required uint32 num_devs = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_devs());

    // required uint32 addr = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addr());

    // required uint32 timeout = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());

    // required uint32 inter_polling = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inter_polling());

    // required uint32 intra_polling = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_intra_polling());

    // required uint32 retry_timeout = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retry_timeout());

    // required uint32 retries = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retries());

    // required uint32 poll_trigger = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_poll_trigger());

    // required .TModbusTypeConn_ mode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusParms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ModbusParms)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusParms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusParms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ModbusParms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ModbusParms)
    MergeFrom(*source);
  }
}

void ModbusParms::MergeFrom(const ModbusParms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModbusParms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      baud_rate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.baud_rate_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      address_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_list_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      trigger_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trigger_path_);
    }
    if (cached_has_bits & 0x00000020u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_devs_ = from.num_devs_;
    }
    if (cached_has_bits & 0x00000080u) {
      addr_ = from.addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      inter_polling_ = from.inter_polling_;
    }
    if (cached_has_bits & 0x00000400u) {
      intra_polling_ = from.intra_polling_;
    }
    if (cached_has_bits & 0x00000800u) {
      retry_timeout_ = from.retry_timeout_;
    }
    if (cached_has_bits & 0x00001000u) {
      retries_ = from.retries_;
    }
    if (cached_has_bits & 0x00002000u) {
      poll_trigger_ = from.poll_trigger_;
    }
    if (cached_has_bits & 0x00004000u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModbusParms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ModbusParms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusParms::CopyFrom(const ModbusParms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModbusParms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusParms::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  return true;
}

void ModbusParms::InternalSwap(ModbusParms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  baud_rate_.Swap(&other->baud_rate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_list_.Swap(&other->address_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trigger_path_.Swap(&other->trigger_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(num_devs_, other->num_devs_);
  swap(addr_, other->addr_);
  swap(timeout_, other->timeout_);
  swap(inter_polling_, other->inter_polling_);
  swap(intra_polling_, other->intra_polling_);
  swap(retry_timeout_, other->retry_timeout_);
  swap(retries_, other->retries_);
  swap(poll_trigger_, other->poll_trigger_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusParms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquipClass::InitAsDefaultInstance() {
}
class EquipClass::_Internal {
 public:
  using HasBits = decltype(std::declval<EquipClass>()._has_bits_);
  static void set_has_classid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_typeid_(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_classmap_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_classmap_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

EquipClass::EquipClass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipClass)
}
EquipClass::EquipClass(const EquipClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  classmap_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_classmap_description()) {
    classmap_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classmap_description_);
  }
  classmap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_classmap_path()) {
    classmap_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classmap_path_);
  }
  ::memcpy(&classid_, &from.classid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mapid_) -
    reinterpret_cast<char*>(&classid_)) + sizeof(mapid_));
  // @@protoc_insertion_point(copy_constructor:EquipClass)
}

void EquipClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EquipClass_config_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classmap_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classmap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&classid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapid_) -
      reinterpret_cast<char*>(&classid_)) + sizeof(mapid_));
}

EquipClass::~EquipClass() {
  // @@protoc_insertion_point(destructor:EquipClass)
  SharedDtor();
}

void EquipClass::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classmap_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classmap_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EquipClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipClass& EquipClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipClass_config_2eproto.base);
  return *internal_default_instance();
}


void EquipClass::Clear() {
// @@protoc_insertion_point(message_clear_start:EquipClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      classmap_description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      classmap_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&classid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mapid_) -
        reinterpret_cast<char*>(&classid_)) + sizeof(mapid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EquipClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 classId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_classid(&has_bits);
          classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 typeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_typeid_(&has_bits);
          typeid__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mapId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mapid(&has_bits);
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquipClass.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquipClass.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string classmap_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_classmap_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquipClass.classmap_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string classmap_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_classmap_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquipClass.classmap_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 classId = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_classid(), target);
  }

  // required uint32 typeId = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_typeid_(), target);
  }

  // required uint32 mapId = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  // required string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EquipClass.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // required string version = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EquipClass.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // required string classmap_description = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_classmap_description().data(), static_cast<int>(this->_internal_classmap_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EquipClass.classmap_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_classmap_description(), target);
  }

  // required string classmap_path = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_classmap_path().data(), static_cast<int>(this->_internal_classmap_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EquipClass.classmap_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_classmap_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipClass)
  return target;
}

size_t EquipClass::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EquipClass)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_version()) {
    // required string version = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (_internal_has_classmap_description()) {
    // required string classmap_description = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classmap_description());
  }

  if (_internal_has_classmap_path()) {
    // required string classmap_path = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classmap_path());
  }

  if (_internal_has_classid()) {
    // required uint32 classId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_classid());
  }

  if (_internal_has_typeid_()) {
    // required uint32 typeId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typeid_());
  }

  if (_internal_has_mapid()) {
    // required uint32 mapId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());
  }

  return total_size;
}
size_t EquipClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EquipClass)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string version = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());

    // required string classmap_description = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classmap_description());

    // required string classmap_path = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classmap_path());

    // required uint32 classId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_classid());

    // required uint32 typeId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_typeid_());

    // required uint32 mapId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EquipClass)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EquipClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EquipClass)
    MergeFrom(*source);
  }
}

void EquipClass::MergeFrom(const EquipClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EquipClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      classmap_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classmap_description_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      classmap_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.classmap_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      classid_ = from.classid_;
    }
    if (cached_has_bits & 0x00000020u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000040u) {
      mapid_ = from.mapid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EquipClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EquipClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipClass::CopyFrom(const EquipClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EquipClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipClass::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void EquipClass::InternalSwap(EquipClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  classmap_description_.Swap(&other->classmap_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  classmap_path_.Swap(&other->classmap_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(classid_, other->classid_);
  swap(typeid__, other->typeid__);
  swap(mapid_, other->mapid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Device::InitAsDefaultInstance() {
  ::_Device_default_instance_._instance.get_mutable()->modbus_cfg_ = const_cast< ::ModbusParms*>(
      ::ModbusParms::internal_default_instance());
  ::_Device_default_instance_._instance.get_mutable()->dnp3_cfg_ = const_cast< ::Dnp3Parms*>(
      ::Dnp3Parms::internal_default_instance());
  ::_Device_default_instance_._instance.get_mutable()->classmap_ = const_cast< ::EquipClass*>(
      ::EquipClass::internal_default_instance());
}
class Device::_Internal {
 public:
  using HasBits = decltype(std::declval<Device>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manufacturer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ug(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ModbusParms& modbus_cfg(const Device* msg);
  static void set_has_modbus_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Dnp3Parms& dnp3_cfg(const Device* msg);
  static void set_has_dnp3_cfg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::EquipClass& classmap(const Device* msg);
  static void set_has_classmap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ModbusParms&
Device::_Internal::modbus_cfg(const Device* msg) {
  return *msg->modbus_cfg_;
}
const ::Dnp3Parms&
Device::_Internal::dnp3_cfg(const Device* msg) {
  return *msg->dnp3_cfg_;
}
const ::EquipClass&
Device::_Internal::classmap(const Device* msg) {
  return *msg->classmap_;
}
Device::Device()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from._internal_has_modbus_cfg()) {
    modbus_cfg_ = new ::ModbusParms(*from.modbus_cfg_);
  } else {
    modbus_cfg_ = nullptr;
  }
  if (from._internal_has_dnp3_cfg()) {
    dnp3_cfg_ = new ::Dnp3Parms(*from.dnp3_cfg_);
  } else {
    dnp3_cfg_ = nullptr;
  }
  if (from._internal_has_classmap()) {
    classmap_ = new ::EquipClass(*from.classmap_);
  } else {
    classmap_ = nullptr;
  }
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ug_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(ug_));
  // @@protoc_insertion_point(copy_constructor:Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_config_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modbus_cfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ug_) -
      reinterpret_cast<char*>(&modbus_cfg_)) + sizeof(ug_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Device)
  SharedDtor();
}

void Device::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete modbus_cfg_;
  if (this != internal_default_instance()) delete dnp3_cfg_;
  if (this != internal_default_instance()) delete classmap_;
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_config_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      manufacturer_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(modbus_cfg_ != nullptr);
      modbus_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(dnp3_cfg_ != nullptr);
      dnp3_cfg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(classmap_ != nullptr);
      classmap_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ug_) -
        reinterpret_cast<char*>(&class_id_)) + sizeof(ug_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Device.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Device.manufacturer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Device.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 class_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ug(&has_bits);
          ug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .ModbusParms modbus_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_modbus_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Dnp3Parms dnp3_cfg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dnp3_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .EquipClass classmap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_classmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Device.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string manufacturer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Device.manufacturer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufacturer(), target);
  }

  // required string model = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Device.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  // required uint32 class_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_class_id(), target);
  }

  // required uint32 ug = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ug(), target);
  }

  // required .ModbusParms modbus_cfg = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::modbus_cfg(this), target, stream);
  }

  // required .Dnp3Parms dnp3_cfg = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dnp3_cfg(this), target, stream);
  }

  // required .EquipClass classmap = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::classmap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Device)
  return target;
}

size_t Device::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Device)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_manufacturer()) {
    // required string manufacturer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  if (_internal_has_model()) {
    // required string model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  if (_internal_has_modbus_cfg()) {
    // required .ModbusParms modbus_cfg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modbus_cfg_);
  }

  if (_internal_has_dnp3_cfg()) {
    // required .Dnp3Parms dnp3_cfg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dnp3_cfg_);
  }

  if (_internal_has_classmap()) {
    // required .EquipClass classmap = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classmap_);
  }

  if (_internal_has_class_id()) {
    // required uint32 class_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_class_id());
  }

  if (_internal_has_ug()) {
    // required uint32 ug = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ug());
  }

  return total_size;
}
size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Device)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string manufacturer = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());

    // required string model = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());

    // required .ModbusParms modbus_cfg = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *modbus_cfg_);

    // required .Dnp3Parms dnp3_cfg = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dnp3_cfg_);

    // required .EquipClass classmap = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classmap_);

    // required uint32 class_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_class_id());

    // required uint32 ug = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ug());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_modbus_cfg()->::ModbusParms::MergeFrom(from._internal_modbus_cfg());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_dnp3_cfg()->::Dnp3Parms::MergeFrom(from._internal_dnp3_cfg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_classmap()->::EquipClass::MergeFrom(from._internal_classmap());
    }
    if (cached_has_bits & 0x00000040u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      ug_ = from.ug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (_internal_has_modbus_cfg()) {
    if (!modbus_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_dnp3_cfg()) {
    if (!dnp3_cfg_->IsInitialized()) return false;
  }
  if (_internal_has_classmap()) {
    if (!classmap_->IsInitialized()) return false;
  }
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(modbus_cfg_, other->modbus_cfg_);
  swap(dnp3_cfg_, other->dnp3_cfg_);
  swap(classmap_, other->classmap_);
  swap(class_id_, other->class_id_);
  swap(ug_, other->ug_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigGateway::InitAsDefaultInstance() {
}
class ConfigGateway::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigGateway>()._has_bits_);
};

ConfigGateway::ConfigGateway()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigGateway)
}
ConfigGateway::ConfigGateway(const ConfigGateway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConfigGateway)
}

void ConfigGateway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigGateway_config_2eproto.base);
}

ConfigGateway::~ConfigGateway() {
  // @@protoc_insertion_point(destructor:ConfigGateway)
  SharedDtor();
}

void ConfigGateway::SharedDtor() {
}

void ConfigGateway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigGateway& ConfigGateway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigGateway_config_2eproto.base);
  return *internal_default_instance();
}


void ConfigGateway::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConfigGateway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Device devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigGateway::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigGateway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigGateway)
  return target;
}

size_t ConfigGateway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigGateway)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Device devices = 1;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigGateway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigGateway)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigGateway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigGateway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigGateway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigGateway)
    MergeFrom(*source);
  }
}

void ConfigGateway::MergeFrom(const ConfigGateway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigGateway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void ConfigGateway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGateway::CopyFrom(const ConfigGateway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigGateway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGateway::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(devices_)) return false;
  return true;
}

void ConfigGateway::InternalSwap(ConfigGateway* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  devices_.InternalSwap(&other->devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigGateway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigGatewayResponse::InitAsDefaultInstance() {
}
class ConfigGatewayResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigGatewayResponse>()._has_bits_);
  static void set_has_numdevicescfg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ConfigGatewayResponse::ConfigGatewayResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigGatewayResponse)
}
ConfigGatewayResponse::ConfigGatewayResponse(const ConfigGatewayResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_errmsg()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&numdevicescfg_, &from.numdevicescfg_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&numdevicescfg_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:ConfigGatewayResponse)
}

void ConfigGatewayResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigGatewayResponse_config_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&numdevicescfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&numdevicescfg_)) + sizeof(success_));
}

ConfigGatewayResponse::~ConfigGatewayResponse() {
  // @@protoc_insertion_point(destructor:ConfigGatewayResponse)
  SharedDtor();
}

void ConfigGatewayResponse::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigGatewayResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigGatewayResponse& ConfigGatewayResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigGatewayResponse_config_2eproto.base);
  return *internal_default_instance();
}


void ConfigGatewayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigGatewayResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&numdevicescfg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&numdevicescfg_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ConfigGatewayResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 numDevicesCfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_numdevicescfg(&has_bits);
          numdevicescfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string errMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConfigGatewayResponse.errMsg");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigGatewayResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigGatewayResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 numDevicesCfg = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_numdevicescfg(), target);
  }

  // required bool success = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // optional string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ConfigGatewayResponse.errMsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigGatewayResponse)
  return target;
}

size_t ConfigGatewayResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConfigGatewayResponse)
  size_t total_size = 0;

  if (_internal_has_numdevicescfg()) {
    // required uint32 numDevicesCfg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numdevicescfg());
  }

  if (_internal_has_success()) {
    // required bool success = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ConfigGatewayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigGatewayResponse)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 numDevicesCfg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numdevicescfg());

    // required bool success = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string errMsg = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigGatewayResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigGatewayResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigGatewayResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigGatewayResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigGatewayResponse)
    MergeFrom(*source);
  }
}

void ConfigGatewayResponse::MergeFrom(const ConfigGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigGatewayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      numdevicescfg_ = from.numdevicescfg_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigGatewayResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGatewayResponse::CopyFrom(const ConfigGatewayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigGatewayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGatewayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void ConfigGatewayResponse::InternalSwap(ConfigGatewayResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(numdevicescfg_, other->numdevicescfg_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigGatewayResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Dnp3Parms* Arena::CreateMaybeMessage< ::Dnp3Parms >(Arena* arena) {
  return Arena::CreateInternal< ::Dnp3Parms >(arena);
}
template<> PROTOBUF_NOINLINE ::ModbusParms* Arena::CreateMaybeMessage< ::ModbusParms >(Arena* arena) {
  return Arena::CreateInternal< ::ModbusParms >(arena);
}
template<> PROTOBUF_NOINLINE ::EquipClass* Arena::CreateMaybeMessage< ::EquipClass >(Arena* arena) {
  return Arena::CreateInternal< ::EquipClass >(arena);
}
template<> PROTOBUF_NOINLINE ::Device* Arena::CreateMaybeMessage< ::Device >(Arena* arena) {
  return Arena::CreateInternal< ::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigGateway* Arena::CreateMaybeMessage< ::ConfigGateway >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigGateway >(arena);
}
template<> PROTOBUF_NOINLINE ::ConfigGatewayResponse* Arena::CreateMaybeMessage< ::ConfigGatewayResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ConfigGatewayResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
