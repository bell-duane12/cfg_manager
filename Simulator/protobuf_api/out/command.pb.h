// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "objects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
class AnalogCommand;
class AnalogCommandDefaultTypeInternal;
extern AnalogCommandDefaultTypeInternal _AnalogCommand_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class DigitalCommand;
class DigitalCommandDefaultTypeInternal;
extern DigitalCommandDefaultTypeInternal _DigitalCommand_default_instance_;
class FileCommand;
class FileCommandDefaultTypeInternal;
extern FileCommandDefaultTypeInternal _FileCommand_default_instance_;
class LoggerCommand;
class LoggerCommandDefaultTypeInternal;
extern LoggerCommandDefaultTypeInternal _LoggerCommand_default_instance_;
class RTCCommands;
class RTCCommandsDefaultTypeInternal;
extern RTCCommandsDefaultTypeInternal _RTCCommands_default_instance_;
class ReadCommandClass;
class ReadCommandClassDefaultTypeInternal;
extern ReadCommandClassDefaultTypeInternal _ReadCommandClass_default_instance_;
class ThreadCommand;
class ThreadCommandDefaultTypeInternal;
extern ThreadCommandDefaultTypeInternal _ThreadCommand_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AnalogCommand* Arena::CreateMaybeMessage<::AnalogCommand>(Arena*);
template<> ::Commands* Arena::CreateMaybeMessage<::Commands>(Arena*);
template<> ::DigitalCommand* Arena::CreateMaybeMessage<::DigitalCommand>(Arena*);
template<> ::FileCommand* Arena::CreateMaybeMessage<::FileCommand>(Arena*);
template<> ::LoggerCommand* Arena::CreateMaybeMessage<::LoggerCommand>(Arena*);
template<> ::RTCCommands* Arena::CreateMaybeMessage<::RTCCommands>(Arena*);
template<> ::ReadCommandClass* Arena::CreateMaybeMessage<::ReadCommandClass>(Arena*);
template<> ::ThreadCommand* Arena::CreateMaybeMessage<::ThreadCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DOType : int {
  DOT_CLOSE = 1,
  DOT_TRIP = 2,
  DOT_LATCH_ON = 3,
  DOT_LATCH_OFF = 4,
  DOT_PULSE_ON = 5,
  DOT_PULSE_OFF = 6
};
bool DOType_IsValid(int value);
constexpr DOType DOType_MIN = DOT_CLOSE;
constexpr DOType DOType_MAX = DOT_PULSE_OFF;
constexpr int DOType_ARRAYSIZE = DOType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOType_descriptor();
template<typename T>
inline const std::string& DOType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DOType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DOType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DOType_descriptor(), enum_t_value);
}
inline bool DOType_Parse(
    const std::string& name, DOType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DOType>(
    DOType_descriptor(), name, value);
}
enum AOType : int {
  AOT_READ = 1,
  AOT_WRITE = 2
};
bool AOType_IsValid(int value);
constexpr AOType AOType_MIN = AOT_READ;
constexpr AOType AOType_MAX = AOT_WRITE;
constexpr int AOType_ARRAYSIZE = AOType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AOType_descriptor();
template<typename T>
inline const std::string& AOType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AOType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AOType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AOType_descriptor(), enum_t_value);
}
inline bool AOType_Parse(
    const std::string& name, AOType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AOType>(
    AOType_descriptor(), name, value);
}
enum ThrCmdType : int {
  START = 1,
  STOP = 2,
  RELOAD = 3
};
bool ThrCmdType_IsValid(int value);
constexpr ThrCmdType ThrCmdType_MIN = START;
constexpr ThrCmdType ThrCmdType_MAX = RELOAD;
constexpr int ThrCmdType_ARRAYSIZE = ThrCmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThrCmdType_descriptor();
template<typename T>
inline const std::string& ThrCmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThrCmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThrCmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ThrCmdType_descriptor(), enum_t_value);
}
inline bool ThrCmdType_Parse(
    const std::string& name, ThrCmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThrCmdType>(
    ThrCmdType_descriptor(), name, value);
}
enum FType : int {
  FT_READ = 1,
  FT_WRITE = 2
};
bool FType_IsValid(int value);
constexpr FType FType_MIN = FT_READ;
constexpr FType FType_MAX = FT_WRITE;
constexpr int FType_ARRAYSIZE = FType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FType_descriptor();
template<typename T>
inline const std::string& FType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FType_descriptor(), enum_t_value);
}
inline bool FType_Parse(
    const std::string& name, FType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FType>(
    FType_descriptor(), name, value);
}
// ===================================================================

class LoggerCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoggerCommand) */ {
 public:
  LoggerCommand();
  virtual ~LoggerCommand();

  LoggerCommand(const LoggerCommand& from);
  LoggerCommand(LoggerCommand&& from) noexcept
    : LoggerCommand() {
    *this = ::std::move(from);
  }

  inline LoggerCommand& operator=(const LoggerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerCommand& operator=(LoggerCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggerCommand* internal_default_instance() {
    return reinterpret_cast<const LoggerCommand*>(
               &_LoggerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoggerCommand& a, LoggerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerCommand* New() const final {
    return CreateMaybeMessage<LoggerCommand>(nullptr);
  }

  LoggerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerCommand& from);
  void MergeFrom(const LoggerCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoggerCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogStateFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // required bool log_state = 1;
  bool has_log_state() const;
  private:
  bool _internal_has_log_state() const;
  public:
  void clear_log_state();
  bool log_state() const;
  void set_log_state(bool value);
  private:
  bool _internal_log_state() const;
  void _internal_set_log_state(bool value);
  public:

  // optional bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LoggerCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool log_state_;
  bool success_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class ThreadCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ThreadCommand) */ {
 public:
  ThreadCommand();
  virtual ~ThreadCommand();

  ThreadCommand(const ThreadCommand& from);
  ThreadCommand(ThreadCommand&& from) noexcept
    : ThreadCommand() {
    *this = ::std::move(from);
  }

  inline ThreadCommand& operator=(const ThreadCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThreadCommand& operator=(ThreadCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThreadCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThreadCommand* internal_default_instance() {
    return reinterpret_cast<const ThreadCommand*>(
               &_ThreadCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThreadCommand& a, ThreadCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ThreadCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThreadCommand* New() const final {
    return CreateMaybeMessage<ThreadCommand>(nullptr);
  }

  ThreadCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThreadCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThreadCommand& from);
  void MergeFrom(const ThreadCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThreadCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ThreadCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // optional bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // required .ThrCmdType operation = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::ThrCmdType operation() const;
  void set_operation(::ThrCmdType value);
  private:
  ::ThrCmdType _internal_operation() const;
  void _internal_set_operation(::ThrCmdType value);
  public:

  // @@protoc_insertion_point(class_scope:ThreadCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  int operation_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class DigitalCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalCommand) */ {
 public:
  DigitalCommand();
  virtual ~DigitalCommand();

  DigitalCommand(const DigitalCommand& from);
  DigitalCommand(DigitalCommand&& from) noexcept
    : DigitalCommand() {
    *this = ::std::move(from);
  }

  inline DigitalCommand& operator=(const DigitalCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalCommand& operator=(DigitalCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalCommand* internal_default_instance() {
    return reinterpret_cast<const DigitalCommand*>(
               &_DigitalCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DigitalCommand& a, DigitalCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalCommand* New() const final {
    return CreateMaybeMessage<DigitalCommand>(nullptr);
  }

  DigitalCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalCommand& from);
  void MergeFrom(const DigitalCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 6,
    kPointFieldNumber = 1,
    kSuccessFieldNumber = 4,
    kTimeFieldNumber = 3,
    kErrCodeFieldNumber = 5,
    kOperationFieldNumber = 2,
  };
  // optional string errMsg = 6;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional uint32 point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 errCode = 5;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOType operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::DOType operation() const;
  void set_operation(::DOType value);
  private:
  ::DOType _internal_operation() const;
  void _internal_set_operation(::DOType value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  int operation_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class AnalogCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AnalogCommand) */ {
 public:
  AnalogCommand();
  virtual ~AnalogCommand();

  AnalogCommand(const AnalogCommand& from);
  AnalogCommand(AnalogCommand&& from) noexcept
    : AnalogCommand() {
    *this = ::std::move(from);
  }

  inline AnalogCommand& operator=(const AnalogCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogCommand& operator=(AnalogCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogCommand* internal_default_instance() {
    return reinterpret_cast<const AnalogCommand*>(
               &_AnalogCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AnalogCommand& a, AnalogCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogCommand* New() const final {
    return CreateMaybeMessage<AnalogCommand>(nullptr);
  }

  AnalogCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogCommand& from);
  void MergeFrom(const AnalogCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AnalogCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 6,
    kPointFieldNumber = 1,
    kSuccessFieldNumber = 4,
    kTimeFieldNumber = 3,
    kAcdataFieldNumber = 7,
    kErrCodeFieldNumber = 5,
    kOperationFieldNumber = 2,
  };
  // optional string errMsg = 6;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional uint32 point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 point() const;
  void set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point() const;
  void _internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double acdata = 7;
  bool has_acdata() const;
  private:
  bool _internal_has_acdata() const;
  public:
  void clear_acdata();
  double acdata() const;
  void set_acdata(double value);
  private:
  double _internal_acdata() const;
  void _internal_set_acdata(double value);
  public:

  // optional uint32 errCode = 5;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .AOType operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::AOType operation() const;
  void set_operation(::AOType value);
  private:
  ::AOType _internal_operation() const;
  void _internal_set_operation(::AOType value);
  public:

  // @@protoc_insertion_point(class_scope:AnalogCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  double acdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  int operation_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class FileCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileCommand) */ {
 public:
  FileCommand();
  virtual ~FileCommand();

  FileCommand(const FileCommand& from);
  FileCommand(FileCommand&& from) noexcept
    : FileCommand() {
    *this = ::std::move(from);
  }

  inline FileCommand& operator=(const FileCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileCommand& operator=(FileCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileCommand* internal_default_instance() {
    return reinterpret_cast<const FileCommand*>(
               &_FileCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileCommand& a, FileCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(FileCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileCommand* New() const final {
    return CreateMaybeMessage<FileCommand>(nullptr);
  }

  FileCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileCommand& from);
  void MergeFrom(const FileCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistersFieldNumber = 5,
    kNameFieldNumber = 1,
    kContentFieldNumber = 7,
    kStartRegisterFieldNumber = 2,
    kEndRegisterFieldNumber = 3,
    kSuccessFieldNumber = 6,
    kOperationFieldNumber = 4,
  };
  // repeated string registers = 5;
  int registers_size() const;
  private:
  int _internal_registers_size() const;
  public:
  void clear_registers();
  const std::string& registers(int index) const;
  std::string* mutable_registers(int index);
  void set_registers(int index, const std::string& value);
  void set_registers(int index, std::string&& value);
  void set_registers(int index, const char* value);
  void set_registers(int index, const char* value, size_t size);
  std::string* add_registers();
  void add_registers(const std::string& value);
  void add_registers(std::string&& value);
  void add_registers(const char* value);
  void add_registers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& registers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_registers();
  private:
  const std::string& _internal_registers(int index) const;
  std::string* _internal_add_registers();
  public:

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string content = 7;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional uint32 startRegister = 2;
  bool has_startregister() const;
  private:
  bool _internal_has_startregister() const;
  public:
  void clear_startregister();
  ::PROTOBUF_NAMESPACE_ID::uint32 startregister() const;
  void set_startregister(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startregister() const;
  void _internal_set_startregister(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 endRegister = 3;
  bool has_endregister() const;
  private:
  bool _internal_has_endregister() const;
  public:
  void clear_endregister();
  ::PROTOBUF_NAMESPACE_ID::uint32 endregister() const;
  void set_endregister(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_endregister() const;
  void _internal_set_endregister(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool success = 6;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional .FType operation = 4;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::FType operation() const;
  void set_operation(::FType value);
  private:
  ::FType _internal_operation() const;
  void _internal_set_operation(::FType value);
  public:

  // @@protoc_insertion_point(class_scope:FileCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> registers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startregister_;
  ::PROTOBUF_NAMESPACE_ID::uint32 endregister_;
  bool success_;
  int operation_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class ReadCommandClass :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReadCommandClass) */ {
 public:
  ReadCommandClass();
  virtual ~ReadCommandClass();

  ReadCommandClass(const ReadCommandClass& from);
  ReadCommandClass(ReadCommandClass&& from) noexcept
    : ReadCommandClass() {
    *this = ::std::move(from);
  }

  inline ReadCommandClass& operator=(const ReadCommandClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadCommandClass& operator=(ReadCommandClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadCommandClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadCommandClass* internal_default_instance() {
    return reinterpret_cast<const ReadCommandClass*>(
               &_ReadCommandClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReadCommandClass& a, ReadCommandClass& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadCommandClass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadCommandClass* New() const final {
    return CreateMaybeMessage<ReadCommandClass>(nullptr);
  }

  ReadCommandClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadCommandClass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadCommandClass& from);
  void MergeFrom(const ReadCommandClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadCommandClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReadCommandClass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassValuesFieldNumber = 5,
    kIntegrityValuesFieldNumber = 6,
    kIntegrityFieldNumber = 1,
    kClass1FieldNumber = 2,
    kClass2FieldNumber = 3,
    kClass3FieldNumber = 4,
  };
  // repeated .ObjectValues classValues = 5;
  int classvalues_size() const;
  private:
  int _internal_classvalues_size() const;
  public:
  void clear_classvalues();
  ::ObjectValues* mutable_classvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
      mutable_classvalues();
  private:
  const ::ObjectValues& _internal_classvalues(int index) const;
  ::ObjectValues* _internal_add_classvalues();
  public:
  const ::ObjectValues& classvalues(int index) const;
  ::ObjectValues* add_classvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
      classvalues() const;

  // repeated .ObjectValues integrityValues = 6;
  int integrityvalues_size() const;
  private:
  int _internal_integrityvalues_size() const;
  public:
  void clear_integrityvalues();
  ::ObjectValues* mutable_integrityvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
      mutable_integrityvalues();
  private:
  const ::ObjectValues& _internal_integrityvalues(int index) const;
  ::ObjectValues* _internal_add_integrityvalues();
  public:
  const ::ObjectValues& integrityvalues(int index) const;
  ::ObjectValues* add_integrityvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
      integrityvalues() const;

  // optional bool integrity = 1;
  bool has_integrity() const;
  private:
  bool _internal_has_integrity() const;
  public:
  void clear_integrity();
  bool integrity() const;
  void set_integrity(bool value);
  private:
  bool _internal_integrity() const;
  void _internal_set_integrity(bool value);
  public:

  // optional bool class1 = 2;
  bool has_class1() const;
  private:
  bool _internal_has_class1() const;
  public:
  void clear_class1();
  bool class1() const;
  void set_class1(bool value);
  private:
  bool _internal_class1() const;
  void _internal_set_class1(bool value);
  public:

  // optional bool class2 = 3;
  bool has_class2() const;
  private:
  bool _internal_has_class2() const;
  public:
  void clear_class2();
  bool class2() const;
  void set_class2(bool value);
  private:
  bool _internal_class2() const;
  void _internal_set_class2(bool value);
  public:

  // optional bool class3 = 4;
  bool has_class3() const;
  private:
  bool _internal_has_class3() const;
  public:
  void clear_class3();
  bool class3() const;
  void set_class3(bool value);
  private:
  bool _internal_class3() const;
  void _internal_set_class3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ReadCommandClass)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues > classvalues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues > integrityvalues_;
  bool integrity_;
  bool class1_;
  bool class2_;
  bool class3_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class RTCCommands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RTCCommands) */ {
 public:
  RTCCommands();
  virtual ~RTCCommands();

  RTCCommands(const RTCCommands& from);
  RTCCommands(RTCCommands&& from) noexcept
    : RTCCommands() {
    *this = ::std::move(from);
  }

  inline RTCCommands& operator=(const RTCCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTCCommands& operator=(RTCCommands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RTCCommands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTCCommands* internal_default_instance() {
    return reinterpret_cast<const RTCCommands*>(
               &_RTCCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RTCCommands& a, RTCCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(RTCCommands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RTCCommands* New() const final {
    return CreateMaybeMessage<RTCCommands>(nullptr);
  }

  RTCCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RTCCommands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RTCCommands& from);
  void MergeFrom(const RTCCommands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RTCCommands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RTCCommands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtcdataFieldNumber = 2,
    kWriteFieldNumber = 1,
    kReadFieldNumber = 3,
  };
  // optional int64 rtcdata = 2;
  bool has_rtcdata() const;
  private:
  bool _internal_has_rtcdata() const;
  public:
  void clear_rtcdata();
  ::PROTOBUF_NAMESPACE_ID::int64 rtcdata() const;
  void set_rtcdata(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rtcdata() const;
  void _internal_set_rtcdata(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool write = 1;
  bool has_write() const;
  private:
  bool _internal_has_write() const;
  public:
  void clear_write();
  bool write() const;
  void set_write(bool value);
  private:
  bool _internal_write() const;
  void _internal_set_write(bool value);
  public:

  // optional bool read = 3;
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  bool read() const;
  void set_read(bool value);
  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RTCCommands)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 rtcdata_;
  bool write_;
  bool read_;
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Commands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Commands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_command_2eproto);
    return ::descriptor_table_command_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigCmdFieldNumber = 1,
    kReadClassFieldNumber = 2,
    kRtcCmdFieldNumber = 3,
    kAnalogCmdFieldNumber = 7,
    kLogCmdFieldNumber = 8,
    kThreadCmdFieldNumber = 9,
    kEnablePollFieldNumber = 4,
    kAttemptsFieldNumber = 6,
  };
  // optional .DigitalCommand digCmd = 1;
  bool has_digcmd() const;
  private:
  bool _internal_has_digcmd() const;
  public:
  void clear_digcmd();
  const ::DigitalCommand& digcmd() const;
  ::DigitalCommand* release_digcmd();
  ::DigitalCommand* mutable_digcmd();
  void set_allocated_digcmd(::DigitalCommand* digcmd);
  private:
  const ::DigitalCommand& _internal_digcmd() const;
  ::DigitalCommand* _internal_mutable_digcmd();
  public:

  // optional .ReadCommandClass readClass = 2;
  bool has_readclass() const;
  private:
  bool _internal_has_readclass() const;
  public:
  void clear_readclass();
  const ::ReadCommandClass& readclass() const;
  ::ReadCommandClass* release_readclass();
  ::ReadCommandClass* mutable_readclass();
  void set_allocated_readclass(::ReadCommandClass* readclass);
  private:
  const ::ReadCommandClass& _internal_readclass() const;
  ::ReadCommandClass* _internal_mutable_readclass();
  public:

  // optional .RTCCommands rtcCmd = 3;
  bool has_rtccmd() const;
  private:
  bool _internal_has_rtccmd() const;
  public:
  void clear_rtccmd();
  const ::RTCCommands& rtccmd() const;
  ::RTCCommands* release_rtccmd();
  ::RTCCommands* mutable_rtccmd();
  void set_allocated_rtccmd(::RTCCommands* rtccmd);
  private:
  const ::RTCCommands& _internal_rtccmd() const;
  ::RTCCommands* _internal_mutable_rtccmd();
  public:

  // optional .AnalogCommand analogCmd = 7;
  bool has_analogcmd() const;
  private:
  bool _internal_has_analogcmd() const;
  public:
  void clear_analogcmd();
  const ::AnalogCommand& analogcmd() const;
  ::AnalogCommand* release_analogcmd();
  ::AnalogCommand* mutable_analogcmd();
  void set_allocated_analogcmd(::AnalogCommand* analogcmd);
  private:
  const ::AnalogCommand& _internal_analogcmd() const;
  ::AnalogCommand* _internal_mutable_analogcmd();
  public:

  // optional .LoggerCommand logCmd = 8;
  bool has_logcmd() const;
  private:
  bool _internal_has_logcmd() const;
  public:
  void clear_logcmd();
  const ::LoggerCommand& logcmd() const;
  ::LoggerCommand* release_logcmd();
  ::LoggerCommand* mutable_logcmd();
  void set_allocated_logcmd(::LoggerCommand* logcmd);
  private:
  const ::LoggerCommand& _internal_logcmd() const;
  ::LoggerCommand* _internal_mutable_logcmd();
  public:

  // optional .ThreadCommand threadCmd = 9;
  bool has_threadcmd() const;
  private:
  bool _internal_has_threadcmd() const;
  public:
  void clear_threadcmd();
  const ::ThreadCommand& threadcmd() const;
  ::ThreadCommand* release_threadcmd();
  ::ThreadCommand* mutable_threadcmd();
  void set_allocated_threadcmd(::ThreadCommand* threadcmd);
  private:
  const ::ThreadCommand& _internal_threadcmd() const;
  ::ThreadCommand* _internal_mutable_threadcmd();
  public:

  // optional bool enablePoll = 4;
  bool has_enablepoll() const;
  private:
  bool _internal_has_enablepoll() const;
  public:
  void clear_enablepoll();
  bool enablepoll() const;
  void set_enablepoll(bool value);
  private:
  bool _internal_enablepoll() const;
  void _internal_set_enablepoll(bool value);
  public:

  // optional uint32 attempts = 6;
  bool has_attempts() const;
  private:
  bool _internal_has_attempts() const;
  public:
  void clear_attempts();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempts() const;
  void set_attempts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attempts() const;
  void _internal_set_attempts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Commands)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::DigitalCommand* digcmd_;
  ::ReadCommandClass* readclass_;
  ::RTCCommands* rtccmd_;
  ::AnalogCommand* analogcmd_;
  ::LoggerCommand* logcmd_;
  ::ThreadCommand* threadcmd_;
  bool enablepoll_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempts_;
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoggerCommand

// required bool log_state = 1;
inline bool LoggerCommand::_internal_has_log_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoggerCommand::has_log_state() const {
  return _internal_has_log_state();
}
inline void LoggerCommand::clear_log_state() {
  log_state_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LoggerCommand::_internal_log_state() const {
  return log_state_;
}
inline bool LoggerCommand::log_state() const {
  // @@protoc_insertion_point(field_get:LoggerCommand.log_state)
  return _internal_log_state();
}
inline void LoggerCommand::_internal_set_log_state(bool value) {
  _has_bits_[0] |= 0x00000001u;
  log_state_ = value;
}
inline void LoggerCommand::set_log_state(bool value) {
  _internal_set_log_state(value);
  // @@protoc_insertion_point(field_set:LoggerCommand.log_state)
}

// optional bool success = 2;
inline bool LoggerCommand::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoggerCommand::has_success() const {
  return _internal_has_success();
}
inline void LoggerCommand::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LoggerCommand::_internal_success() const {
  return success_;
}
inline bool LoggerCommand::success() const {
  // @@protoc_insertion_point(field_get:LoggerCommand.success)
  return _internal_success();
}
inline void LoggerCommand::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000002u;
  success_ = value;
}
inline void LoggerCommand::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LoggerCommand.success)
}

// -------------------------------------------------------------------

// ThreadCommand

// required .ThrCmdType operation = 1;
inline bool ThreadCommand::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThreadCommand::has_operation() const {
  return _internal_has_operation();
}
inline void ThreadCommand::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ThrCmdType ThreadCommand::_internal_operation() const {
  return static_cast< ::ThrCmdType >(operation_);
}
inline ::ThrCmdType ThreadCommand::operation() const {
  // @@protoc_insertion_point(field_get:ThreadCommand.operation)
  return _internal_operation();
}
inline void ThreadCommand::_internal_set_operation(::ThrCmdType value) {
  assert(::ThrCmdType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void ThreadCommand::set_operation(::ThrCmdType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:ThreadCommand.operation)
}

// optional bool success = 2;
inline bool ThreadCommand::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThreadCommand::has_success() const {
  return _internal_has_success();
}
inline void ThreadCommand::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ThreadCommand::_internal_success() const {
  return success_;
}
inline bool ThreadCommand::success() const {
  // @@protoc_insertion_point(field_get:ThreadCommand.success)
  return _internal_success();
}
inline void ThreadCommand::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void ThreadCommand::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ThreadCommand.success)
}

// -------------------------------------------------------------------

// DigitalCommand

// optional uint32 point = 1;
inline bool DigitalCommand::_internal_has_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DigitalCommand::has_point() const {
  return _internal_has_point();
}
inline void DigitalCommand::clear_point() {
  point_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCommand::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCommand::point() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.point)
  return _internal_point();
}
inline void DigitalCommand::_internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  point_ = value;
}
inline void DigitalCommand::set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.point)
}

// optional .DOType operation = 2;
inline bool DigitalCommand::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DigitalCommand::has_operation() const {
  return _internal_has_operation();
}
inline void DigitalCommand::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::DOType DigitalCommand::_internal_operation() const {
  return static_cast< ::DOType >(operation_);
}
inline ::DOType DigitalCommand::operation() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.operation)
  return _internal_operation();
}
inline void DigitalCommand::_internal_set_operation(::DOType value) {
  assert(::DOType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  operation_ = value;
}
inline void DigitalCommand::set_operation(::DOType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.operation)
}

// optional int64 time = 3;
inline bool DigitalCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DigitalCommand::has_time() const {
  return _internal_has_time();
}
inline void DigitalCommand::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DigitalCommand::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DigitalCommand::time() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.time)
  return _internal_time();
}
inline void DigitalCommand::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void DigitalCommand::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.time)
}

// optional bool success = 4;
inline bool DigitalCommand::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DigitalCommand::has_success() const {
  return _internal_has_success();
}
inline void DigitalCommand::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DigitalCommand::_internal_success() const {
  return success_;
}
inline bool DigitalCommand::success() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.success)
  return _internal_success();
}
inline void DigitalCommand::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void DigitalCommand::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.success)
}

// optional uint32 errCode = 5;
inline bool DigitalCommand::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DigitalCommand::has_errcode() const {
  return _internal_has_errcode();
}
inline void DigitalCommand::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCommand::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalCommand::errcode() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.errCode)
  return _internal_errcode();
}
inline void DigitalCommand::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  errcode_ = value;
}
inline void DigitalCommand::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.errCode)
}

// optional string errMsg = 6;
inline bool DigitalCommand::_internal_has_errmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DigitalCommand::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void DigitalCommand::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DigitalCommand::errmsg() const {
  // @@protoc_insertion_point(field_get:DigitalCommand.errMsg)
  return _internal_errmsg();
}
inline void DigitalCommand::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:DigitalCommand.errMsg)
}
inline std::string* DigitalCommand::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:DigitalCommand.errMsg)
  return _internal_mutable_errmsg();
}
inline const std::string& DigitalCommand::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void DigitalCommand::_internal_set_errmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DigitalCommand::set_errmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DigitalCommand.errMsg)
}
inline void DigitalCommand::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DigitalCommand.errMsg)
}
inline void DigitalCommand::set_errmsg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DigitalCommand.errMsg)
}
inline std::string* DigitalCommand::_internal_mutable_errmsg() {
  _has_bits_[0] |= 0x00000001u;
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DigitalCommand::release_errmsg() {
  // @@protoc_insertion_point(field_release:DigitalCommand.errMsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errmsg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DigitalCommand::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:DigitalCommand.errMsg)
}

// -------------------------------------------------------------------

// AnalogCommand

// optional uint32 point = 1;
inline bool AnalogCommand::_internal_has_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AnalogCommand::has_point() const {
  return _internal_has_point();
}
inline void AnalogCommand::clear_point() {
  point_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCommand::_internal_point() const {
  return point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCommand::point() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.point)
  return _internal_point();
}
inline void AnalogCommand::_internal_set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  point_ = value;
}
inline void AnalogCommand::set_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.point)
}

// optional .AOType operation = 2;
inline bool AnalogCommand::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AnalogCommand::has_operation() const {
  return _internal_has_operation();
}
inline void AnalogCommand::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::AOType AnalogCommand::_internal_operation() const {
  return static_cast< ::AOType >(operation_);
}
inline ::AOType AnalogCommand::operation() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.operation)
  return _internal_operation();
}
inline void AnalogCommand::_internal_set_operation(::AOType value) {
  assert(::AOType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  operation_ = value;
}
inline void AnalogCommand::set_operation(::AOType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.operation)
}

// optional int64 time = 3;
inline bool AnalogCommand::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AnalogCommand::has_time() const {
  return _internal_has_time();
}
inline void AnalogCommand::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnalogCommand::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AnalogCommand::time() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.time)
  return _internal_time();
}
inline void AnalogCommand::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void AnalogCommand::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.time)
}

// optional bool success = 4;
inline bool AnalogCommand::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AnalogCommand::has_success() const {
  return _internal_has_success();
}
inline void AnalogCommand::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AnalogCommand::_internal_success() const {
  return success_;
}
inline bool AnalogCommand::success() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.success)
  return _internal_success();
}
inline void AnalogCommand::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000004u;
  success_ = value;
}
inline void AnalogCommand::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.success)
}

// optional uint32 errCode = 5;
inline bool AnalogCommand::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AnalogCommand::has_errcode() const {
  return _internal_has_errcode();
}
inline void AnalogCommand::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCommand::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogCommand::errcode() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.errCode)
  return _internal_errcode();
}
inline void AnalogCommand::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  errcode_ = value;
}
inline void AnalogCommand::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.errCode)
}

// optional string errMsg = 6;
inline bool AnalogCommand::_internal_has_errmsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AnalogCommand::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void AnalogCommand::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnalogCommand::errmsg() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.errMsg)
  return _internal_errmsg();
}
inline void AnalogCommand::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.errMsg)
}
inline std::string* AnalogCommand::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:AnalogCommand.errMsg)
  return _internal_mutable_errmsg();
}
inline const std::string& AnalogCommand::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void AnalogCommand::_internal_set_errmsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AnalogCommand::set_errmsg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AnalogCommand.errMsg)
}
inline void AnalogCommand::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AnalogCommand.errMsg)
}
inline void AnalogCommand::set_errmsg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AnalogCommand.errMsg)
}
inline std::string* AnalogCommand::_internal_mutable_errmsg() {
  _has_bits_[0] |= 0x00000001u;
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AnalogCommand::release_errmsg() {
  // @@protoc_insertion_point(field_release:AnalogCommand.errMsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errmsg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AnalogCommand::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:AnalogCommand.errMsg)
}

// optional double acdata = 7;
inline bool AnalogCommand::_internal_has_acdata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AnalogCommand::has_acdata() const {
  return _internal_has_acdata();
}
inline void AnalogCommand::clear_acdata() {
  acdata_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AnalogCommand::_internal_acdata() const {
  return acdata_;
}
inline double AnalogCommand::acdata() const {
  // @@protoc_insertion_point(field_get:AnalogCommand.acdata)
  return _internal_acdata();
}
inline void AnalogCommand::_internal_set_acdata(double value) {
  _has_bits_[0] |= 0x00000010u;
  acdata_ = value;
}
inline void AnalogCommand::set_acdata(double value) {
  _internal_set_acdata(value);
  // @@protoc_insertion_point(field_set:AnalogCommand.acdata)
}

// -------------------------------------------------------------------

// FileCommand

// optional string name = 1;
inline bool FileCommand::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileCommand::has_name() const {
  return _internal_has_name();
}
inline void FileCommand::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileCommand::name() const {
  // @@protoc_insertion_point(field_get:FileCommand.name)
  return _internal_name();
}
inline void FileCommand::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FileCommand.name)
}
inline std::string* FileCommand::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FileCommand.name)
  return _internal_mutable_name();
}
inline const std::string& FileCommand::_internal_name() const {
  return name_.GetNoArena();
}
inline void FileCommand::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileCommand::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCommand.name)
}
inline void FileCommand::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCommand.name)
}
inline void FileCommand::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCommand.name)
}
inline std::string* FileCommand::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileCommand::release_name() {
  // @@protoc_insertion_point(field_release:FileCommand.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileCommand::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FileCommand.name)
}

// optional uint32 startRegister = 2;
inline bool FileCommand::_internal_has_startregister() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileCommand::has_startregister() const {
  return _internal_has_startregister();
}
inline void FileCommand::clear_startregister() {
  startregister_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCommand::_internal_startregister() const {
  return startregister_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCommand::startregister() const {
  // @@protoc_insertion_point(field_get:FileCommand.startRegister)
  return _internal_startregister();
}
inline void FileCommand::_internal_set_startregister(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  startregister_ = value;
}
inline void FileCommand::set_startregister(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startregister(value);
  // @@protoc_insertion_point(field_set:FileCommand.startRegister)
}

// optional uint32 endRegister = 3;
inline bool FileCommand::_internal_has_endregister() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FileCommand::has_endregister() const {
  return _internal_has_endregister();
}
inline void FileCommand::clear_endregister() {
  endregister_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCommand::_internal_endregister() const {
  return endregister_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileCommand::endregister() const {
  // @@protoc_insertion_point(field_get:FileCommand.endRegister)
  return _internal_endregister();
}
inline void FileCommand::_internal_set_endregister(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  endregister_ = value;
}
inline void FileCommand::set_endregister(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_endregister(value);
  // @@protoc_insertion_point(field_set:FileCommand.endRegister)
}

// optional .FType operation = 4;
inline bool FileCommand::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FileCommand::has_operation() const {
  return _internal_has_operation();
}
inline void FileCommand::clear_operation() {
  operation_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::FType FileCommand::_internal_operation() const {
  return static_cast< ::FType >(operation_);
}
inline ::FType FileCommand::operation() const {
  // @@protoc_insertion_point(field_get:FileCommand.operation)
  return _internal_operation();
}
inline void FileCommand::_internal_set_operation(::FType value) {
  assert(::FType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  operation_ = value;
}
inline void FileCommand::set_operation(::FType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:FileCommand.operation)
}

// repeated string registers = 5;
inline int FileCommand::_internal_registers_size() const {
  return registers_.size();
}
inline int FileCommand::registers_size() const {
  return _internal_registers_size();
}
inline void FileCommand::clear_registers() {
  registers_.Clear();
}
inline std::string* FileCommand::add_registers() {
  // @@protoc_insertion_point(field_add_mutable:FileCommand.registers)
  return _internal_add_registers();
}
inline const std::string& FileCommand::_internal_registers(int index) const {
  return registers_.Get(index);
}
inline const std::string& FileCommand::registers(int index) const {
  // @@protoc_insertion_point(field_get:FileCommand.registers)
  return _internal_registers(index);
}
inline std::string* FileCommand::mutable_registers(int index) {
  // @@protoc_insertion_point(field_mutable:FileCommand.registers)
  return registers_.Mutable(index);
}
inline void FileCommand::set_registers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FileCommand.registers)
  registers_.Mutable(index)->assign(value);
}
inline void FileCommand::set_registers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FileCommand.registers)
  registers_.Mutable(index)->assign(std::move(value));
}
inline void FileCommand::set_registers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  registers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FileCommand.registers)
}
inline void FileCommand::set_registers(int index, const char* value, size_t size) {
  registers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FileCommand.registers)
}
inline std::string* FileCommand::_internal_add_registers() {
  return registers_.Add();
}
inline void FileCommand::add_registers(const std::string& value) {
  registers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FileCommand.registers)
}
inline void FileCommand::add_registers(std::string&& value) {
  registers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FileCommand.registers)
}
inline void FileCommand::add_registers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  registers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FileCommand.registers)
}
inline void FileCommand::add_registers(const char* value, size_t size) {
  registers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FileCommand.registers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileCommand::registers() const {
  // @@protoc_insertion_point(field_list:FileCommand.registers)
  return registers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileCommand::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:FileCommand.registers)
  return &registers_;
}

// optional bool success = 6;
inline bool FileCommand::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FileCommand::has_success() const {
  return _internal_has_success();
}
inline void FileCommand::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FileCommand::_internal_success() const {
  return success_;
}
inline bool FileCommand::success() const {
  // @@protoc_insertion_point(field_get:FileCommand.success)
  return _internal_success();
}
inline void FileCommand::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000010u;
  success_ = value;
}
inline void FileCommand::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:FileCommand.success)
}

// optional string content = 7;
inline bool FileCommand::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileCommand::has_content() const {
  return _internal_has_content();
}
inline void FileCommand::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileCommand::content() const {
  // @@protoc_insertion_point(field_get:FileCommand.content)
  return _internal_content();
}
inline void FileCommand::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:FileCommand.content)
}
inline std::string* FileCommand::mutable_content() {
  // @@protoc_insertion_point(field_mutable:FileCommand.content)
  return _internal_mutable_content();
}
inline const std::string& FileCommand::_internal_content() const {
  return content_.GetNoArena();
}
inline void FileCommand::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileCommand::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileCommand.content)
}
inline void FileCommand::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileCommand.content)
}
inline void FileCommand::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileCommand.content)
}
inline std::string* FileCommand::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileCommand::release_content() {
  // @@protoc_insertion_point(field_release:FileCommand.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileCommand::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:FileCommand.content)
}

// -------------------------------------------------------------------

// ReadCommandClass

// optional bool integrity = 1;
inline bool ReadCommandClass::_internal_has_integrity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadCommandClass::has_integrity() const {
  return _internal_has_integrity();
}
inline void ReadCommandClass::clear_integrity() {
  integrity_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ReadCommandClass::_internal_integrity() const {
  return integrity_;
}
inline bool ReadCommandClass::integrity() const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.integrity)
  return _internal_integrity();
}
inline void ReadCommandClass::_internal_set_integrity(bool value) {
  _has_bits_[0] |= 0x00000001u;
  integrity_ = value;
}
inline void ReadCommandClass::set_integrity(bool value) {
  _internal_set_integrity(value);
  // @@protoc_insertion_point(field_set:ReadCommandClass.integrity)
}

// optional bool class1 = 2;
inline bool ReadCommandClass::_internal_has_class1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadCommandClass::has_class1() const {
  return _internal_has_class1();
}
inline void ReadCommandClass::clear_class1() {
  class1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ReadCommandClass::_internal_class1() const {
  return class1_;
}
inline bool ReadCommandClass::class1() const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.class1)
  return _internal_class1();
}
inline void ReadCommandClass::_internal_set_class1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  class1_ = value;
}
inline void ReadCommandClass::set_class1(bool value) {
  _internal_set_class1(value);
  // @@protoc_insertion_point(field_set:ReadCommandClass.class1)
}

// optional bool class2 = 3;
inline bool ReadCommandClass::_internal_has_class2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadCommandClass::has_class2() const {
  return _internal_has_class2();
}
inline void ReadCommandClass::clear_class2() {
  class2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ReadCommandClass::_internal_class2() const {
  return class2_;
}
inline bool ReadCommandClass::class2() const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.class2)
  return _internal_class2();
}
inline void ReadCommandClass::_internal_set_class2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  class2_ = value;
}
inline void ReadCommandClass::set_class2(bool value) {
  _internal_set_class2(value);
  // @@protoc_insertion_point(field_set:ReadCommandClass.class2)
}

// optional bool class3 = 4;
inline bool ReadCommandClass::_internal_has_class3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadCommandClass::has_class3() const {
  return _internal_has_class3();
}
inline void ReadCommandClass::clear_class3() {
  class3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadCommandClass::_internal_class3() const {
  return class3_;
}
inline bool ReadCommandClass::class3() const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.class3)
  return _internal_class3();
}
inline void ReadCommandClass::_internal_set_class3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  class3_ = value;
}
inline void ReadCommandClass::set_class3(bool value) {
  _internal_set_class3(value);
  // @@protoc_insertion_point(field_set:ReadCommandClass.class3)
}

// repeated .ObjectValues classValues = 5;
inline int ReadCommandClass::_internal_classvalues_size() const {
  return classvalues_.size();
}
inline int ReadCommandClass::classvalues_size() const {
  return _internal_classvalues_size();
}
inline ::ObjectValues* ReadCommandClass::mutable_classvalues(int index) {
  // @@protoc_insertion_point(field_mutable:ReadCommandClass.classValues)
  return classvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
ReadCommandClass::mutable_classvalues() {
  // @@protoc_insertion_point(field_mutable_list:ReadCommandClass.classValues)
  return &classvalues_;
}
inline const ::ObjectValues& ReadCommandClass::_internal_classvalues(int index) const {
  return classvalues_.Get(index);
}
inline const ::ObjectValues& ReadCommandClass::classvalues(int index) const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.classValues)
  return _internal_classvalues(index);
}
inline ::ObjectValues* ReadCommandClass::_internal_add_classvalues() {
  return classvalues_.Add();
}
inline ::ObjectValues* ReadCommandClass::add_classvalues() {
  // @@protoc_insertion_point(field_add:ReadCommandClass.classValues)
  return _internal_add_classvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
ReadCommandClass::classvalues() const {
  // @@protoc_insertion_point(field_list:ReadCommandClass.classValues)
  return classvalues_;
}

// repeated .ObjectValues integrityValues = 6;
inline int ReadCommandClass::_internal_integrityvalues_size() const {
  return integrityvalues_.size();
}
inline int ReadCommandClass::integrityvalues_size() const {
  return _internal_integrityvalues_size();
}
inline ::ObjectValues* ReadCommandClass::mutable_integrityvalues(int index) {
  // @@protoc_insertion_point(field_mutable:ReadCommandClass.integrityValues)
  return integrityvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >*
ReadCommandClass::mutable_integrityvalues() {
  // @@protoc_insertion_point(field_mutable_list:ReadCommandClass.integrityValues)
  return &integrityvalues_;
}
inline const ::ObjectValues& ReadCommandClass::_internal_integrityvalues(int index) const {
  return integrityvalues_.Get(index);
}
inline const ::ObjectValues& ReadCommandClass::integrityvalues(int index) const {
  // @@protoc_insertion_point(field_get:ReadCommandClass.integrityValues)
  return _internal_integrityvalues(index);
}
inline ::ObjectValues* ReadCommandClass::_internal_add_integrityvalues() {
  return integrityvalues_.Add();
}
inline ::ObjectValues* ReadCommandClass::add_integrityvalues() {
  // @@protoc_insertion_point(field_add:ReadCommandClass.integrityValues)
  return _internal_add_integrityvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectValues >&
ReadCommandClass::integrityvalues() const {
  // @@protoc_insertion_point(field_list:ReadCommandClass.integrityValues)
  return integrityvalues_;
}

// -------------------------------------------------------------------

// RTCCommands

// optional bool write = 1;
inline bool RTCCommands::_internal_has_write() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RTCCommands::has_write() const {
  return _internal_has_write();
}
inline void RTCCommands::clear_write() {
  write_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RTCCommands::_internal_write() const {
  return write_;
}
inline bool RTCCommands::write() const {
  // @@protoc_insertion_point(field_get:RTCCommands.write)
  return _internal_write();
}
inline void RTCCommands::_internal_set_write(bool value) {
  _has_bits_[0] |= 0x00000002u;
  write_ = value;
}
inline void RTCCommands::set_write(bool value) {
  _internal_set_write(value);
  // @@protoc_insertion_point(field_set:RTCCommands.write)
}

// optional int64 rtcdata = 2;
inline bool RTCCommands::_internal_has_rtcdata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RTCCommands::has_rtcdata() const {
  return _internal_has_rtcdata();
}
inline void RTCCommands::clear_rtcdata() {
  rtcdata_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RTCCommands::_internal_rtcdata() const {
  return rtcdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RTCCommands::rtcdata() const {
  // @@protoc_insertion_point(field_get:RTCCommands.rtcdata)
  return _internal_rtcdata();
}
inline void RTCCommands::_internal_set_rtcdata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  rtcdata_ = value;
}
inline void RTCCommands::set_rtcdata(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rtcdata(value);
  // @@protoc_insertion_point(field_set:RTCCommands.rtcdata)
}

// optional bool read = 3;
inline bool RTCCommands::_internal_has_read() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RTCCommands::has_read() const {
  return _internal_has_read();
}
inline void RTCCommands::clear_read() {
  read_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RTCCommands::_internal_read() const {
  return read_;
}
inline bool RTCCommands::read() const {
  // @@protoc_insertion_point(field_get:RTCCommands.read)
  return _internal_read();
}
inline void RTCCommands::_internal_set_read(bool value) {
  _has_bits_[0] |= 0x00000004u;
  read_ = value;
}
inline void RTCCommands::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:RTCCommands.read)
}

// -------------------------------------------------------------------

// Commands

// optional .DigitalCommand digCmd = 1;
inline bool Commands::_internal_has_digcmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || digcmd_ != nullptr);
  return value;
}
inline bool Commands::has_digcmd() const {
  return _internal_has_digcmd();
}
inline void Commands::clear_digcmd() {
  if (digcmd_ != nullptr) digcmd_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::DigitalCommand& Commands::_internal_digcmd() const {
  const ::DigitalCommand* p = digcmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DigitalCommand*>(
      &::_DigitalCommand_default_instance_);
}
inline const ::DigitalCommand& Commands::digcmd() const {
  // @@protoc_insertion_point(field_get:Commands.digCmd)
  return _internal_digcmd();
}
inline ::DigitalCommand* Commands::release_digcmd() {
  // @@protoc_insertion_point(field_release:Commands.digCmd)
  _has_bits_[0] &= ~0x00000001u;
  ::DigitalCommand* temp = digcmd_;
  digcmd_ = nullptr;
  return temp;
}
inline ::DigitalCommand* Commands::_internal_mutable_digcmd() {
  _has_bits_[0] |= 0x00000001u;
  if (digcmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::DigitalCommand>(GetArenaNoVirtual());
    digcmd_ = p;
  }
  return digcmd_;
}
inline ::DigitalCommand* Commands::mutable_digcmd() {
  // @@protoc_insertion_point(field_mutable:Commands.digCmd)
  return _internal_mutable_digcmd();
}
inline void Commands::set_allocated_digcmd(::DigitalCommand* digcmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete digcmd_;
  }
  if (digcmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      digcmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digcmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digcmd_ = digcmd;
  // @@protoc_insertion_point(field_set_allocated:Commands.digCmd)
}

// optional .ReadCommandClass readClass = 2;
inline bool Commands::_internal_has_readclass() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || readclass_ != nullptr);
  return value;
}
inline bool Commands::has_readclass() const {
  return _internal_has_readclass();
}
inline void Commands::clear_readclass() {
  if (readclass_ != nullptr) readclass_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ReadCommandClass& Commands::_internal_readclass() const {
  const ::ReadCommandClass* p = readclass_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ReadCommandClass*>(
      &::_ReadCommandClass_default_instance_);
}
inline const ::ReadCommandClass& Commands::readclass() const {
  // @@protoc_insertion_point(field_get:Commands.readClass)
  return _internal_readclass();
}
inline ::ReadCommandClass* Commands::release_readclass() {
  // @@protoc_insertion_point(field_release:Commands.readClass)
  _has_bits_[0] &= ~0x00000002u;
  ::ReadCommandClass* temp = readclass_;
  readclass_ = nullptr;
  return temp;
}
inline ::ReadCommandClass* Commands::_internal_mutable_readclass() {
  _has_bits_[0] |= 0x00000002u;
  if (readclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::ReadCommandClass>(GetArenaNoVirtual());
    readclass_ = p;
  }
  return readclass_;
}
inline ::ReadCommandClass* Commands::mutable_readclass() {
  // @@protoc_insertion_point(field_mutable:Commands.readClass)
  return _internal_mutable_readclass();
}
inline void Commands::set_allocated_readclass(::ReadCommandClass* readclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete readclass_;
  }
  if (readclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readclass, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  readclass_ = readclass;
  // @@protoc_insertion_point(field_set_allocated:Commands.readClass)
}

// optional .RTCCommands rtcCmd = 3;
inline bool Commands::_internal_has_rtccmd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || rtccmd_ != nullptr);
  return value;
}
inline bool Commands::has_rtccmd() const {
  return _internal_has_rtccmd();
}
inline void Commands::clear_rtccmd() {
  if (rtccmd_ != nullptr) rtccmd_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::RTCCommands& Commands::_internal_rtccmd() const {
  const ::RTCCommands* p = rtccmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RTCCommands*>(
      &::_RTCCommands_default_instance_);
}
inline const ::RTCCommands& Commands::rtccmd() const {
  // @@protoc_insertion_point(field_get:Commands.rtcCmd)
  return _internal_rtccmd();
}
inline ::RTCCommands* Commands::release_rtccmd() {
  // @@protoc_insertion_point(field_release:Commands.rtcCmd)
  _has_bits_[0] &= ~0x00000004u;
  ::RTCCommands* temp = rtccmd_;
  rtccmd_ = nullptr;
  return temp;
}
inline ::RTCCommands* Commands::_internal_mutable_rtccmd() {
  _has_bits_[0] |= 0x00000004u;
  if (rtccmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::RTCCommands>(GetArenaNoVirtual());
    rtccmd_ = p;
  }
  return rtccmd_;
}
inline ::RTCCommands* Commands::mutable_rtccmd() {
  // @@protoc_insertion_point(field_mutable:Commands.rtcCmd)
  return _internal_mutable_rtccmd();
}
inline void Commands::set_allocated_rtccmd(::RTCCommands* rtccmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rtccmd_;
  }
  if (rtccmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rtccmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtccmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rtccmd_ = rtccmd;
  // @@protoc_insertion_point(field_set_allocated:Commands.rtcCmd)
}

// optional bool enablePoll = 4;
inline bool Commands::_internal_has_enablepoll() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Commands::has_enablepoll() const {
  return _internal_has_enablepoll();
}
inline void Commands::clear_enablepoll() {
  enablepoll_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Commands::_internal_enablepoll() const {
  return enablepoll_;
}
inline bool Commands::enablepoll() const {
  // @@protoc_insertion_point(field_get:Commands.enablePoll)
  return _internal_enablepoll();
}
inline void Commands::_internal_set_enablepoll(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enablepoll_ = value;
}
inline void Commands::set_enablepoll(bool value) {
  _internal_set_enablepoll(value);
  // @@protoc_insertion_point(field_set:Commands.enablePoll)
}

// optional uint32 attempts = 6;
inline bool Commands::_internal_has_attempts() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Commands::has_attempts() const {
  return _internal_has_attempts();
}
inline void Commands::clear_attempts() {
  attempts_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::_internal_attempts() const {
  return attempts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Commands::attempts() const {
  // @@protoc_insertion_point(field_get:Commands.attempts)
  return _internal_attempts();
}
inline void Commands::_internal_set_attempts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  attempts_ = value;
}
inline void Commands::set_attempts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attempts(value);
  // @@protoc_insertion_point(field_set:Commands.attempts)
}

// optional .AnalogCommand analogCmd = 7;
inline bool Commands::_internal_has_analogcmd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || analogcmd_ != nullptr);
  return value;
}
inline bool Commands::has_analogcmd() const {
  return _internal_has_analogcmd();
}
inline void Commands::clear_analogcmd() {
  if (analogcmd_ != nullptr) analogcmd_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::AnalogCommand& Commands::_internal_analogcmd() const {
  const ::AnalogCommand* p = analogcmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AnalogCommand*>(
      &::_AnalogCommand_default_instance_);
}
inline const ::AnalogCommand& Commands::analogcmd() const {
  // @@protoc_insertion_point(field_get:Commands.analogCmd)
  return _internal_analogcmd();
}
inline ::AnalogCommand* Commands::release_analogcmd() {
  // @@protoc_insertion_point(field_release:Commands.analogCmd)
  _has_bits_[0] &= ~0x00000008u;
  ::AnalogCommand* temp = analogcmd_;
  analogcmd_ = nullptr;
  return temp;
}
inline ::AnalogCommand* Commands::_internal_mutable_analogcmd() {
  _has_bits_[0] |= 0x00000008u;
  if (analogcmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::AnalogCommand>(GetArenaNoVirtual());
    analogcmd_ = p;
  }
  return analogcmd_;
}
inline ::AnalogCommand* Commands::mutable_analogcmd() {
  // @@protoc_insertion_point(field_mutable:Commands.analogCmd)
  return _internal_mutable_analogcmd();
}
inline void Commands::set_allocated_analogcmd(::AnalogCommand* analogcmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete analogcmd_;
  }
  if (analogcmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      analogcmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analogcmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  analogcmd_ = analogcmd;
  // @@protoc_insertion_point(field_set_allocated:Commands.analogCmd)
}

// optional .LoggerCommand logCmd = 8;
inline bool Commands::_internal_has_logcmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || logcmd_ != nullptr);
  return value;
}
inline bool Commands::has_logcmd() const {
  return _internal_has_logcmd();
}
inline void Commands::clear_logcmd() {
  if (logcmd_ != nullptr) logcmd_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::LoggerCommand& Commands::_internal_logcmd() const {
  const ::LoggerCommand* p = logcmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LoggerCommand*>(
      &::_LoggerCommand_default_instance_);
}
inline const ::LoggerCommand& Commands::logcmd() const {
  // @@protoc_insertion_point(field_get:Commands.logCmd)
  return _internal_logcmd();
}
inline ::LoggerCommand* Commands::release_logcmd() {
  // @@protoc_insertion_point(field_release:Commands.logCmd)
  _has_bits_[0] &= ~0x00000010u;
  ::LoggerCommand* temp = logcmd_;
  logcmd_ = nullptr;
  return temp;
}
inline ::LoggerCommand* Commands::_internal_mutable_logcmd() {
  _has_bits_[0] |= 0x00000010u;
  if (logcmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::LoggerCommand>(GetArenaNoVirtual());
    logcmd_ = p;
  }
  return logcmd_;
}
inline ::LoggerCommand* Commands::mutable_logcmd() {
  // @@protoc_insertion_point(field_mutable:Commands.logCmd)
  return _internal_mutable_logcmd();
}
inline void Commands::set_allocated_logcmd(::LoggerCommand* logcmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete logcmd_;
  }
  if (logcmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logcmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logcmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  logcmd_ = logcmd;
  // @@protoc_insertion_point(field_set_allocated:Commands.logCmd)
}

// optional .ThreadCommand threadCmd = 9;
inline bool Commands::_internal_has_threadcmd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || threadcmd_ != nullptr);
  return value;
}
inline bool Commands::has_threadcmd() const {
  return _internal_has_threadcmd();
}
inline void Commands::clear_threadcmd() {
  if (threadcmd_ != nullptr) threadcmd_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ThreadCommand& Commands::_internal_threadcmd() const {
  const ::ThreadCommand* p = threadcmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ThreadCommand*>(
      &::_ThreadCommand_default_instance_);
}
inline const ::ThreadCommand& Commands::threadcmd() const {
  // @@protoc_insertion_point(field_get:Commands.threadCmd)
  return _internal_threadcmd();
}
inline ::ThreadCommand* Commands::release_threadcmd() {
  // @@protoc_insertion_point(field_release:Commands.threadCmd)
  _has_bits_[0] &= ~0x00000020u;
  ::ThreadCommand* temp = threadcmd_;
  threadcmd_ = nullptr;
  return temp;
}
inline ::ThreadCommand* Commands::_internal_mutable_threadcmd() {
  _has_bits_[0] |= 0x00000020u;
  if (threadcmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::ThreadCommand>(GetArenaNoVirtual());
    threadcmd_ = p;
  }
  return threadcmd_;
}
inline ::ThreadCommand* Commands::mutable_threadcmd() {
  // @@protoc_insertion_point(field_mutable:Commands.threadCmd)
  return _internal_mutable_threadcmd();
}
inline void Commands::set_allocated_threadcmd(::ThreadCommand* threadcmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete threadcmd_;
  }
  if (threadcmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      threadcmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threadcmd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  threadcmd_ = threadcmd;
  // @@protoc_insertion_point(field_set_allocated:Commands.threadCmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DOType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOType>() {
  return ::DOType_descriptor();
}
template <> struct is_proto_enum< ::AOType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AOType>() {
  return ::AOType_descriptor();
}
template <> struct is_proto_enum< ::ThrCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ThrCmdType>() {
  return ::ThrCmdType_descriptor();
}
template <> struct is_proto_enum< ::FType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FType>() {
  return ::FType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
