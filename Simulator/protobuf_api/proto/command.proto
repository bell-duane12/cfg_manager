syntax = "proto2";

import "objects.proto";

//---------------------------------

enum DOType {
   DOT_CLOSE 		= 1;
   DOT_TRIP		= 2;
   DOT_LATCH_ON		= 3;
   DOT_LATCH_OFF	= 4;
   DOT_PULSE_ON		= 5;
   DOT_PULSE_OFF 	= 6;
}

enum AOType {
   AOT_READ            = 1;
   AOT_WRITE           = 2;
}

enum ThrCmdType {
  START  = 1;
  STOP	 = 2;
  RELOAD = 3;
}

message LoggerCommand {
  required bool log_state = 1;        // log state (true/ativo ou false/inativo)
  optional bool success = 2;
}

message ThreadCommand {
  required ThrCmdType operation = 1;  // comando (start/stop/reload)
  optional bool success = 2;
}

message DigitalCommand
{
  optional uint32 point = 1;
  optional DOType operation = 2;
  optional int64 time = 3;
  optional bool success = 4;
  optional uint32 errCode = 5;
  optional string errMsg = 6;
}

message AnalogCommand
{
  optional uint32 point = 1;
  optional AOType operation = 2;
  optional int64 time = 3;
  optional bool success = 4;
  optional uint32 errCode = 5;
  optional string errMsg = 6;
  optional double acdata = 7;
}

//---------------------------------

enum FType {
   FT_READ 	= 1;
   FT_WRITE	= 2;
}

message FileCommand
{
  optional string name 		= 1;
  optional uint32 startRegister = 2;
  optional uint32 endRegister	= 3;
  optional FType operation	= 4;
  repeated string registers	= 5;
  optional bool success		= 6;
  optional string content       = 7;
}

//---------------------------------

message ReadCommandClass
{
  optional bool integrity		= 1;
  optional bool class1			= 2;
  optional bool class2			= 3;
  optional bool class3			= 4;
  repeated ObjectValues classValues	= 5;
  repeated ObjectValues integrityValues = 6;
}
//---------------------------------

message RTCCommands
{
  optional bool write		= 1;
  optional int64 rtcdata	= 2;
  optional bool read		= 3;
}
//---------------------------------

message Commands
{
  optional DigitalCommand digCmd	= 1;
  optional ReadCommandClass readClass	= 2;
  optional RTCCommands rtcCmd		= 3;
  optional bool enablePoll		= 4;
  optional uint32 attempts		= 6;
  optional AnalogCommand analogCmd      = 7;
  optional LoggerCommand logCmd         = 8;
  optional ThreadCommand threadCmd      = 9;
}
//---------------------------------




